<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Container operators</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part28.htm">&lt; Previous</a><span> | </span><a href="../Cpp_STL_ReferenceManual.html">Contents</a><span> | </span><a href="part30.htm">Next &gt;</a></p><h3 style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark202">Container operators</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;set&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">container operator=(const container&amp; c2);</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">bool operator==(const container&amp; c1, const container&amp; c2); bool operator!=(const container&amp; c1, const container&amp; c2); bool operator&lt;(const container&amp; c1, const container&amp; c2); bool operator&gt;(const container&amp; c1, const container&amp; c2); bool operator&lt;=(const container&amp; c1, const container&amp; c2); bool operator&gt;=(const container&amp; c1, const container&amp; c2);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">All of the C++ containers can be compared and assigned with the standard comparison operators: ==, !=, &lt;=, &gt;=, &lt;, &gt;, and =. Performing a comparison or assigning one multiset to another takes linear time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Two multisets are equal if:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;">1. Their size is the same, and</p><p style="padding-left: 41pt;text-indent: -14pt;text-align: left;">2. Each member in location i in one multiset is equal to the the member in location i in the other multiset.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">Comparisons among multisets are done lexicographically. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">(C++ Strings) String operators (C++ Strings) at</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">(C++ Lists) merge (C++ Lists) unique</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_175.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 4pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark203">begin</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 19pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;set&gt; iterator begin();</p><p class="s2" style="padding-left: 19pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const_iterator begin() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">The function begin() returns an iterator to the first element of the multiset. begin() should run in constant tim</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">For example, the following code uses begin() to initialize an iterator that is used to traverse a list:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 25pt;text-indent: 0pt;line-height: 93%;text-align: left;">// Create a list of characters list&lt;char&gt; charList;</p><p class="s2" style="padding-left: 37pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( int i=0; i &lt; 10; i++ ) { charList.push_front( i + 65 );</p><p class="s2" style="padding-left: 25pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 25pt;text-indent: 0pt;line-height: 94%;text-align: left;">// Display the list list&lt;char&gt;::iterator theIterator;</p><p class="s2" style="padding-left: 37pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( theIterator = charList.begin(); theIterator != charList.end(); theIterator++ ) cout &lt;&lt; *theIterator;</p><p class="s2" style="padding-left: 25pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">end rbegin rend</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_176.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark204">clear</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;set&gt; void clear();</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">The function clear() deletes all of the elements in the multiset. clear() runs in linear time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(C++ Lists) erase</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_177.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark205">count</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;set&gt;</p><p class="s16" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_type <span class="s2">count( const key_type&amp; key );</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 202%;text-align: left;">The function count() returns the number of occurrences of <i>key </i>in the multiset. count() should run in logarithmic time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_178.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark206">empty</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;set&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">bool empty() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The empty() function returns true if the multiset has no elements, false otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses empty() as the stopping condition on a (C/C++ Keywords) while loop to clear a multiset and display its contents in reverse order:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; v;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( int i = 0; i &lt; 5; i++ ) { v.push_back(i);</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">while( !v.empty() ) {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 93%;text-align: left;">cout &lt;&lt; v.back() &lt;&lt; endl; v.pop_back();</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: size</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_179.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark207">end</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;set&gt; iterator end();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const_iterator end() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The end() function returns an iterator just past the end of the multiset.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Note that before you can access the last element of the multiset using an iterator that you get from a call to end(), you&#39;ll have to decrement the iterator first.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses begin() and end() to iterate through all of the members of a vector:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">vector&lt;int&gt; v1( 5, 789 ); vector&lt;int&gt;::iterator it;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( it = v1.begin(); it != v1.end(); it++ ) { cout &lt;&lt; *it &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The iterator is initialized with a call to begin(). After the body of the loop has been executed, the iterator is incremented and tested to see if it is equal to the result of calling end(). Since end() returns an iterator pointing to an element just after the last element of the vector, the loop will only stop once all of the elements of the vector have been displayed.</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">end() runs in constant time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">begin</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">rbegin rend</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_180.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark208">equal_range</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;set&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">pair&lt;iterator, iterator&gt; equal_range( const key_type&amp; key );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The function equal_range() returns two iterators - one to the first element that contains</p><p class="s11" style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">key<span class="p">, another to a point just after the last element that contains </span>key<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="573" height="1" alt="image" src="Image_181.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark209">erase</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;set&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void erase( iterator pos );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void erase( iterator start, iterator end );</p><p class="s16" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_type <span class="s2">erase( const key_type&amp; key );</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The erase function() either erases the element at <i>pos</i>, erases the elements between <i>start</i></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">and <i>end</i>, or erases all elements that have the value of <i>key</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_182.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark210">find</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;set&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator find( const key_type&amp; key );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The find() function returns an iterator to <i>key</i>, or an iterator to the end of the multiset if <i>key</i></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">is not found.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">find() runs in logarithmic time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_183.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark211">insert</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;set&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">iterator insert( iterator pos, const TYPE&amp; val ); iterator insert( const TYPE&amp; val );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void insert( input_iterator start, input_iterator end );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The function insert() either:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: -14pt;text-align: left;"><span class="s1">•  </span>inserts <i>val </i>after the element at <i>pos </i>(where <i>pos </i>is really just a suggestion as to where <i>val </i>should go, since multisets and multimaps are ordered), and returns an iterator to that element.</p><p style="padding-left: 27pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><span class="s1">•  </span>inserts <i>val </i>into the multiset, returning an iterator to the element inserted.</p><p style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><span class="s1">•  </span>inserts a range of elements from <i>start </i>to <i>end</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="573" height="1" alt="image" src="Image_184.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark212">key_comp</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;set&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">key_compare key_comp() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 202%;text-align: left;">The function key_comp() returns the function that compares keys. key_comp() runs in constant time.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">value_comp</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_185.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark213">lower_bound</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;set&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator lower_bound( const key_type&amp; key );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The lower_bound() function returns an iterator to the first element which has a value greater than or equal to key.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">lower_bound() runs in logarithmic time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">upper_bound</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_186.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark214">max_size</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;set&gt;</p><p class="s16" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_type <span class="s2">max_size() const;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The max_size() function returns the maximum number of elements that the multiset can hold. The max_size() function should not be confused with the size() or (C++ Strings) capacity() functions, which return the number of elements currently in the multiset and the the number of elements that the multiset will be able to hold before more memory will have to be allocated, respectively.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: size</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_187.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark215">rbegin</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;set&gt; reverse_iterator rbegin();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const_reverse_iterator rbegin() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 200%;text-align: left;">The rbegin() function returns a reverse_iterator to the end of the current multiset. rbegin() runs in constant time.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">begin end rend</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_188.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark216">rend</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">#include &lt;set&gt; reverse_iterator rend();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const_reverse_iterator rend() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 202%;text-align: left;">The function rend() returns a reverse_iterator to the beginning of the current multiset. rend() runs in constant time.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">begin end rbegin</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_189.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">size Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;set&gt;</p><p class="s16" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_type <span class="s2">size() const;</span></p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">The size() function returns the number of elements in the current multiset. Related topics:</p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(C++ Strings) capacity</p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;">empty</p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">(C++ Strings) length max_size</p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;">(C++ Strings) resize</p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark217">swap</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 10pt;text-align: left;">#include &lt;set&gt;</p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 10pt;text-align: left;">void swap( container&amp; from );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The swap() function exchanges the elements of the current multiset with those of <i>from</i>. This function operates in constant time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses the swap() function to exchange the values of two strings:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 22pt;text-indent: 0pt;line-height: 94%;text-align: left;">string first( &quot;This comes first&quot; ); string second( &quot;And this is second&quot; ); first.swap( second );</p><p class="s10" style="padding-left: 22pt;text-indent: 0pt;line-height: 94%;text-align: left;">cout &lt;&lt; first &lt;&lt; endl; cout &lt;&lt; second &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: -16pt;text-align: left;">The above code displays:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 22pt;text-indent: 0pt;line-height: 94%;text-align: left;">And this is second This comes first</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Related topics:</p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;">(C++ Lists) splice</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="573" height="1" alt="image" src="Image_190.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark218">upper_bound</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 10pt;text-align: left;">#include &lt;set&gt;</p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 10pt;text-align: left;">iterator upper_bound( const key_type&amp; key );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The function upper_bound() returns an iterator to the first element in the multiset with a key greater than <i>key</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Related topics:</p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;">lower_bound</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_191.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark219">value_comp</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 10pt;text-align: left;">#include &lt;set&gt;</p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 10pt;text-align: left;">value_compare value_comp() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The value_comp() function returns the function that compares values. value_comp() runs in constant time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: key_comp</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part28.htm">&lt; Previous</a><span> | </span><a href="../Cpp_STL_ReferenceManual.html">Contents</a><span> | </span><a href="part30.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
