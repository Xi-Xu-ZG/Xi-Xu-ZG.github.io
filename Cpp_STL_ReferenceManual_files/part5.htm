<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>C++ Algorithms</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part4.htm">&lt; Previous</a><span> | </span><a href="../Cpp_STL_ReferenceManual.html">Contents</a><span> | </span><a href="part6.htm">Next &gt;</a></p><h2 style="padding-top: 4pt;padding-left: 167pt;text-indent: 0pt;text-align: left;"><a name="bookmark3">C++ Algorithms</a></h2><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.125pt" cellspacing="0"><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">accumulate</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">sum up a range of elements</p></td></tr><tr style="height:15pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">adjacent_difference</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">compute the differences between adjacent elements in a range</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">adjacent_find</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">finds two items that are adjacent to eachother</p></td></tr><tr style="height:15pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">binary_search</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">determine if an element exists in a certain range</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">copy</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">copy some range of elements to a new location</p></td></tr><tr style="height:15pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">copy_backward</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">copy a range of elements in backwards order</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">copy_n</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">copy N elements</p></td></tr><tr style="height:15pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">count</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">return the number of elements matching a given value</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">count_if</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">return the number of elements for which a predicate is true</p></td></tr><tr style="height:15pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">equal</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">determine if two sets of elements are the same</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">equal_range</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">search for a range of elements that are all equal to a certain element</p></td></tr><tr style="height:15pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">fill</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">assign a range of elements a certain value</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">fill_n</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">assign a value to some number of elements</p></td></tr><tr style="height:15pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">find</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">find a value in a given range</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">find_end</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">find the last sequence of elements in a certain range</p></td></tr><tr style="height:15pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">find_first_of</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">search for any one of a set of elements</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">find_if</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">find the first element for which a certain predicate is true</p></td></tr><tr style="height:15pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">for_each</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">apply a function to a range of elements</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">generate</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">saves the result of a function in a range</p></td></tr><tr style="height:15pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">generate_n</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">saves the result of N applications of a function</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">includes</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">returns true if one set is a subset of another</p></td></tr><tr style="height:15pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">inner_product</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">compute the inner product of two ranges of elements</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">inplace_merge</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">merge two ordered ranges in-place</p></td></tr><tr style="height:15pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">is_heap</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">returns true if a given range is a heap</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">is_sorted</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">returns true if a range is sorted in ascending order</p></td></tr><tr style="height:15pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">iter_swap</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">swaps the elements pointed to by two iterators</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">lexicographical_compare</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">returns true if one range is lexicographically less than another</p></td></tr><tr style="height:15pt"><td style="width:432pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" colspan="2"><p class="s7" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">lexicographical_compare_3way <span class="s8">determines if one range is lexicographically less than or greater than another</span></p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">lower_bound</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">search for the first place that a value can be inserted while preserving order</p></td></tr><tr style="height:15pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">make_heap</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">creates a heap out of a range of elements</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">max</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">returns the larger of two elements</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">max_element</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">returns the largest element in a range</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">merge</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">merge two sorted ranges</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">min</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">returns the smaller of two elements</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">min_element</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">returns the smallest element in a range</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">mismatch</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">finds the first position where two ranges differ</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">next_permutation</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">generates the next greater lexicographic permutation of a range of elements</p></td></tr><tr style="height:26pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-top: 6pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">nth_element</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-top: 1pt;padding-left: 8pt;padding-right: 4pt;text-indent: 0pt;text-align: left;">put one element in its sorted location and make sure that no elements to its left are greater than any elements to its right</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">partial_sort</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">sort the first N elements of a range</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">partial_sort_copy</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">copy and partially sort a range of elements</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">partial_sum</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">compute the partial sum of a range of elements</p></td></tr><tr style="height:14pt"><td style="width:111pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">partition</p></td><td style="width:321pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: left;">divide a range of elements into two groups</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.125pt" cellspacing="0"><tr style="height:15pt"><td style="width:112pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">pop_heap</p></td><td style="width:320pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">remove the largest element from a heap</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">prev_permutation</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">generates the next smaller lexicographic permutation of a range of elements</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">push_heap</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">add an element to a heap</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">random_sample</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">randomly copy elements from one range to another</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">random_sample_n</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">sample N random elements from a range</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">random_shuffle</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">randomly re-order elements in some range</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">remove</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">remove elements equal to certain value</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">remove_copy</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">copy a range of elements omitting those that match a certian value</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">remove_copy_if</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s7" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">create a copy of a range of elements, omitting any for which a predicate is true</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">remove_if</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">remove all elements for which a predicate is true</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">replace</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">replace every occurrence of some value in a range with another value</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">replace_copy</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">copy a range, replacing certain elements with new ones</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">replace_copy_if</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">copy a range of elements, replacing those for which a predicate is true</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">replace_if</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">change the values of elements for which a predicate is true</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">reverse</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">reverse elements in some range</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">reverse_copy</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">create a copy of a range that is reversed</p></td></tr><tr style="height:15pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">rotate</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">move the elements in some range to the left by some amount</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">rotate_copy</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">copy and rotate a range of elements</p></td></tr><tr style="height:15pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">search</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">search for a range of elements</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">search_n</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">search for N consecutive copies of an element in some range</p></td></tr><tr style="height:15pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">set_difference</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">computes the difference between two sets</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">set_intersection</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">computes the intersection of two sets</p></td></tr><tr style="height:15pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">set_symmetric_difference</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">computes the symmetric difference between two sets</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">set_union</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">computes the union of two sets</p></td></tr><tr style="height:15pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">sort</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">sort a range into ascending order</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">sort_heap</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">turns a heap into a sorted range of elements</p></td></tr><tr style="height:15pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">stable_partition</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">divide elements into two groups while preserving their relative order</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">stable_sort</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">sort a range of elements while preserving order between equal elements</p></td></tr><tr style="height:15pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">swap</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">swap the values of two objects</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">swap_ranges</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">swaps two ranges of elements</p></td></tr><tr style="height:15pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">transform</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">applies a function to a range of elements</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">unique</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s6" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">remove consecutive duplicate elements in a range</p></td></tr><tr style="height:15pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">unique_copy</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s7" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">create a copy of some range of elements that contains no consecutive duplicates</p></td></tr><tr style="height:14pt"><td style="width:112pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s6" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">upper_bound</p></td><td style="width:320pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s7" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">searches for the last possible location to insert an element into an ordered range</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark4">accumulate</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">#include &lt;numeric&gt;</p><p class="s10" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">TYPE accumulate( iterator start, iterator end, TYPE val );</p><p class="s10" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">TYPE accumulate( iterator start, iterator end, TYPE val, BinaryFunction f );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">The accummulate() function computes the sum of <i>val </i>and all of the elements in the range [<i>start</i>,<i>end</i>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">If the binary function <i>f </i>if specified, it is used instead of the + operator to perform the summation.</p><p style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;line-height: 28pt;text-align: left;">accumulate() runs in linear time. Related topics:</p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 11pt;text-align: left;">adjacent_difference</p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">count inner_product partial_sum</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_001.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark5">adjacent_difference</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;numeric&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">iterator adjacent_difference( iterator start, iterator end, iterator result );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">iterator adjacent_difference( iterator start, iterator end, iterator result, BinaryFunction f );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The adjacent_difference() function calculates the differences between adjacent elements in the range [<i>start</i>,<i>end</i>) and stores the result starting at <i>result</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If a binary function <i>f </i>is given, it is used instead of the - operator to compute the differences.</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">adjacent_difference() runs in linear time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">accumulate</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">count inner_product partial_sum</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_002.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark6">adjacent_find</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator adjacent_find( iterator start, iterator end );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator adjacent_find( iterator start, iterator end, BinPred pr );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The adjacent_find() function searches between <i>start </i>and <i>end </i>for two consecutive identical elements. If the binary predicate <i>pr </i>is specified, then it is used to test whether two elements are the same or not.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The return value is an iterator that points to the first of the two elements that are found. If no matching elements are found, the returned iterator points to <i>end</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code creates a vector containing the integers between 0 and 10 with 7 appearing twice in a row. adjacent_find() is then used to find the location of the pair of 7&#39;s:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; v1;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( int i = 0; i &lt; 10; i++ ) { v1.push_back(i);</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 93%;text-align: left;">// add a duplicate 7 into v1 if( i == 7 ) {</p><p class="s2" style="padding-left: 36pt;text-indent: 0pt;line-height: 10pt;text-align: left;">v1.push_back(i);</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt;::iterator result;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 93%;text-align: left;">result = adjacent_find( v1.begin(), v1.end() ); if( result == v1.end() ) {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;Did not find adjacent elements in v1&quot; &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">else {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;Found matching adjacent elements starting at &quot; &lt;&lt; *result</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: find</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">find_end find_first_of find_if unique unique_copy</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_003.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark7">binary_search</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">bool binary_search( iterator start, iterator end, const TYPE&amp; val ); bool binary_search( iterator start, iterator end, const TYPE&amp; val,</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Comp f );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The binary_search() function searches from <i>start </i>to <i>end </i>for <i>val</i>. The elements between <i>start </i>and <i>end </i>that are searched should be in ascending order as defined by the &lt; operator. Note that a binary search <b>will not work </b>unless the elements being searched are in order.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If <i>val </i>is found, binary_search() returns true, otherwise false.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the function <i>f </i>is specified, then it is used to compare elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses binary_search() to determine if the integers 0-9 are in an array of integers:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">int nums[] = { -242, -1, 0, 5, 8, 9, 11 };</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">int start = 0; int end = 7;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">for( int i = 0; i &lt; 10; i++ ) {</p><p class="s2" style="padding-left: 36pt;text-indent: -12pt;line-height: 93%;text-align: left;">if( binary_search( nums+start, nums+end, i ) ) { cout &lt;&lt; &quot;nums[] contains &quot; &lt;&lt; i &lt;&lt; endl;</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">} else {</p><p class="s2" style="padding-left: 36pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;nums[] DOES NOT contain &quot; &lt;&lt; i &lt;&lt; endl;</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">When run, this code displays the following output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">nums[] contains 0</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 93%;text-align: justify;">nums[] DOES NOT contain 1 nums[] DOES NOT contain 2 nums[] DOES NOT contain 3 nums[] DOES NOT contain 4 nums[] contains 5</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 93%;text-align: justify;">nums[] DOES NOT contain 6 nums[] DOES NOT contain 7 nums[] contains 8</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">nums[] contains 9</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: equal_range is_sorted lower_bound</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">partial_sort partial_sort_copy sort</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">stable_sort upper_bound</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_004.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark8">copy</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator copy( iterator start, iterator end, iterator dest );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The copy() function copies the elements between <i>start </i>and <i>end </i>to <i>dest</i>. In other words, after copy() has run,</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">*dest == *start</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">*(dest+1) == *(start+1)</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">*(dest+2) == *(start+2)</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">...</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">*(dest+N) == *(start+N)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The return value is an iterator to the last element copied. copy() runs in linear time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses copy() to copy the contents of one vector to another:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; from_vector;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( int i = 0; i &lt; 10; i++ ) { from_vector.push_back( i );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; to_vector(10);</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">copy( from_vector.begin(), from_vector.end(), to_vector.begin() );</p><p class="s2" style="padding-top: 9pt;padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;to_vector contains: &quot;;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( unsigned int i = 0; i &lt; to_vector.size(); i++ ) { cout &lt;&lt; to_vector[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: copy_backward copy_n generate remove_copy swap</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;">transform</p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark9">copy_backward</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator copy_backward( iterator start, iterator end, iterator dest );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">copy_backward() is similar to (C++ Strings) copy(), in that both functions copy elements from <i>start </i>to <i>end </i>to <i>dest</i>. The copy_backward() function , however, starts depositing elements at <i>dest </i>and then works backwards, such that:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">*(dest-1) == *(end-1)</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">*(dest-2) == *(end-2)</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">*(dest-3) == *(end-3)</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">...</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">*(dest-N) == *(end-N)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The following code uses copy_backward() to copy 10 integers into the end of an empty vector:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; from_vector;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( int i = 0; i &lt; 10; i++ ) { from_vector.push_back( i );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; to_vector(15);</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">copy_backward( from_vector.begin(), from_vector.end(), to_vector.end()</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">);</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;to_vector contains: &quot;;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( unsigned int i = 0; i &lt; to_vector.size(); i++ ) { cout &lt;&lt; to_vector[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The above code produces the following output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">to_vector contains: 0 0 0 0 0 0 1 2 3 4 5 6 7 8 9</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: copy</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">copy_n swap</p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark10">copy_n</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator copy_n( iterator from, size_t num, iterator to );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The copy_n() function copies <i>num </i>elements starting at <i>from </i>to the destination pointed at by <i>to</i>. To put it another way, copy_n() performs <i>num </i>assignments and duplicates a subrange.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The return value of copy_n() is an iterator that points to the last element that was copied,</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">i.e. (to + num).</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">This function runs in linear time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">copy              copy_backward        swap</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_005.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">count Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_t count( iterator start, iterator end, const TYPE&amp; val );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The count() function returns the number of elements between <i>start </i>and <i>end </i>that match</p><p class="s11" style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">val<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses count() to determine how many integers in a vector match a target value:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; v;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( int i = 0; i &lt; 10; i++ ) { v.push_back( i );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">int target_value = 3;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">int num_items = count( v.begin(), v.end(), target_value ); cout &lt;&lt; &quot;v contains &quot; &lt;&lt; num_items &lt;&lt; &quot; items matching &quot; &lt;&lt;</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">target_value &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The above code displays the following output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">v contains 1 items matching 3</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: accumulate adjacent_difference</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">count_if inner_product</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">partial_sum</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_006.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark11">count_if</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_t count_if( iterator start, iterator end, UnaryPred p );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The count_if() function returns the number of elements between <i>start </i>and <i>end </i>for which the predicate <i>p </i>returns true.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses count_if() with a predicate that returns true for the integer 3 to count the number of items in an array that are equal to 3:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">int nums[] = { 0, 1, 2, 3, 4, 5, 9, 3, 13 };</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 93%;text-align: left;">int start = 0; int end = 9;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">int target_value = 3;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">int num_items = count_if( nums+start,</p><p class="s2" style="padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: left;">nums+end,</p><p class="s2" style="padding-left: 126pt;text-indent: 0pt;line-height: 11pt;text-align: left;">bind2nd(equal_to&lt;int&gt;(), target_value) );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 6pt;text-indent: 6pt;line-height: 94%;text-align: left;">cout &lt;&lt; &quot;nums[] contains &quot; &lt;&lt; num_items &lt;&lt; &quot; items matching &quot; &lt;&lt; target_value &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When run, the above code displays the following output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">nums[] contains 2 items matching 3</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: count</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_007.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark12">equal</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">bool equal( iterator start1, iterator end1, iterator start2 );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">bool equal( iterator start1, iterator end1, iterator start2, BinPred p );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The equal() function returns true if the elements in two ranges are the same. The first range of elements are those between <i>start1 </i>and <i>end1</i>. The second range of elements has the same size as the first range but starts at <i>start2</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the binary predicate <i>p </i>is specified, then it is used instead of == to compare each pair of elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses equal() to compare two vectors of integers:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; v1;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( int i = 0; i &lt; 10; i++ ) { v1.push_back( i );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; v2;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( int i = 0; i &lt; 10; i++ ) { v2.push_back( i );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 93%;text-align: left;">if( equal( v1.begin(), v1.end(), v2.begin() ) ) { cout &lt;&lt; &quot;v1 and v2 are equal&quot; &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">} else {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;v1 and v2 are NOT equal&quot; &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: find_if</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">lexicographical_compare mismatch</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">search</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_008.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark13">equal_range</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">pair&lt;iterator,iterator&gt; equal_range( iterator first, iterator last, const TYPE&amp; val );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">pair&lt;iterator,iterator&gt; equal_range( iterator first, iterator last, const TYPE&amp; val, CompFn comp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">The equal_range() function returns the range of elements between <i>first </i>and <i>last </i>that are equal to <i>val</i>. This function assumes that the elements between <i>first </i>and <i>last </i>are in order according to <i>comp</i>, if it is specified, or the &lt; operator otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">equal_range() can be thought of as a combination of the lower_bound() and</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">`upper_bound1`() functions, since the first of the pair of iterators that it returns is what lower_bound() returns and the second iterator in the pair is what `upper_bound1`() returns.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses equal_range() to determine all of the possible places that the number 8 can be inserted into an ordered vector of integers such that the existing ordering is preserved:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">vector&lt;int&gt; nums; nums.push_back( -242 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">nums.push_back( -1 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">nums.push_back( 0 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">nums.push_back( 5 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">nums.push_back( 8 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">nums.push_back( 8 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">nums.push_back( 11 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">pair&lt;vector&lt;int&gt;::iterator, vector&lt;int&gt;::iterator&gt; result; int new_val = 8;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">result = equal_range( nums.begin(), nums.end(), new_val );</p><p class="s2" style="padding-left: 6pt;text-indent: 6pt;line-height: 93%;text-align: left;">cout &lt;&lt; &quot;The first place that &quot; &lt;&lt; new_val &lt;&lt; &quot; could be inserted is before &quot;</p><p class="s2" style="padding-left: 6pt;text-indent: 36pt;line-height: 93%;text-align: left;">&lt;&lt; *result.first &lt;&lt; &quot;, and the last place that it could be inserted is before &quot;</p><p class="s2" style="padding-left: 42pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&lt;&lt; *result.second &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">The above code produces the following output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">The first place that 8 could be inserted is before 8, and the last place that it could be inserted is before 11</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: binary_search lower_bound upper_bound</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_009.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark14">fill</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;algorithm&gt; #include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void fill( iterator start, iterator end, const TYPE&amp; val );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The function fill() assigns <i>val </i>to all of the elements between <i>start </i>and <i>end</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses fill() to set all of the elements of a vector of integers to -1:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; v1;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( int i = 0; i &lt; 10; i++ ) { v1.push_back( i );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;Before, v1 is: &quot;;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( unsigned int i = 0; i &lt; v1.size(); i++ ) { cout &lt;&lt; v1[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">fill( v1.begin(), v1.end(), -1 ); cout &lt;&lt; &quot;After, v1 is: &quot;;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( unsigned int i = 0; i &lt; v1.size(); i++ ) { cout &lt;&lt; v1[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When run, the above code displays:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Before, v1 is: 0 1 2 3 4 5 6 7 8 9</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">After, v1 is: -1 -1 -1 -1 -1 -1 -1 -1 -1 -1</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: fill_n</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">generate transform</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_010.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark15">fill_n</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;algorithm&gt; #include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator fill_n( iterator start, size_t n, const TYPE&amp; val );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The fill_n() function is similar to (C++ I/O) fill(). Instead of assigning <i>val </i>to a range of elements, however, fill_n() assigns <i>val </i>to the first <i>n </i>elements starting at <i>start</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses fill_n() to assign -1 to the first half of a vector of integers:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; v1;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( int i = 0; i &lt; 10; i++ ) { v1.push_back( i );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;Before, v1 is: &quot;;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( unsigned int i = 0; i &lt; v1.size(); i++ ) { cout &lt;&lt; v1[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">fill_n( v1.begin(), v1.size()/2, -1 ); cout &lt;&lt; &quot;After, v1 is: &quot;;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( unsigned int i = 0; i &lt; v1.size(); i++ ) { cout &lt;&lt; v1[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When run, this code displays:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Before, v1 is: 0 1 2 3 4 5 6 7 8 9</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">After, v1 is: -1 -1 -1 -1 -1 5 6 7 8 9</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: fill</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_011.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark16">find</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator find( iterator start, iterator end, const TYPE&amp; val );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The find() algorithm looks for an element matching <i>val </i>between <i>start </i>and <i>end</i>. If an element matching <i>val </i>is found, the return value is an iterator that points to that element. Otherwise, the return value is an iterator that points to <i>end</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses find() to search a vector of integers for the number 3:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">int num_to_find = 3; vector&lt;int&gt; v1;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( int i = 0; i &lt; 10; i++ ) { v1.push_back(i);</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt;::iterator result;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">result = find( v1.begin(), v1.end(), num_to_find ); if( result == v1.end() ) {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;Did not find any element matching &quot; &lt;&lt; num_to_find &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">else {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;Found a matching element: &quot; &lt;&lt; *result &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">In the next example, shown below, the find() function is used on an array of integers. This example shows how the C++ Algorithms can be used to manipulate arrays and pointers in the same manner that they manipulate containers and iterators:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">int nums[] = { 3, 1, 4, 1, 5, 9 };</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">int num_to_find = 5; int start = 0;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">int end = 2;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">int* result = find( nums + start, nums + end, num_to_find );</p><p class="s2" style="padding-top: 9pt;padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">if( result == nums + end ) {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;Did not find any number matching &quot; &lt;&lt; num_to_find &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">} else {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;Found a matching number: &quot; &lt;&lt; *result &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: adjacent_find find_end find_first_of find_if mismatch search</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_012.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark17">find_end</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator find_end( iterator start, iterator end, iterator seq_start, iterator seq_end );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator find_end( iterator start, iterator end, iterator seq_start, iterator seq_end, BinPred bp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The find_end() function searches for the sequence of elements denoted by <i>seq_start </i>and <i>seq_end</i>. If such a sequence if found between <i>start </i>and <i>end</i>, an iterator to the first element of the last found sequence is returned. If no such sequence is found, an iterator pointing to <i>end </i>is returned.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the binary predicate <i>bp </i>is specified, then it is used to when elements match.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses find_end() to search for two different sequences of numbers. The the first chunk of code, the last occurence of &quot;1 2 3&quot; is found. In the second chunk of code, the sequence that is being searched for is not found:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">int nums[] = { 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4 };</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 93%;text-align: left;">int* result; int start = 0; int end = 11;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">int target1[] = { 1, 2, 3 };</p><p class="s2" style="padding-left: 6pt;text-indent: 6pt;line-height: 93%;text-align: left;">result = find_end( nums + start, nums + end, target1 + 0, target1 + 2 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">if( *result == nums[end] ) {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;Did not find any subsequence matching { 1, 2, 3 }&quot; &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">} else {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;The last matching subsequence is at: &quot; &lt;&lt; *result &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">int target2[] = { 3, 2, 3 };</p><p class="s2" style="padding-left: 6pt;text-indent: 6pt;line-height: 93%;text-align: left;">result = find_end( nums + start, nums + end, target2 + 0, target2 + 2 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">if( *result == nums[end] ) {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;Did not find any subsequence matching { 3, 2, 3 }&quot; &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">} else {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;The last matching subsequence is at: &quot; &lt;&lt; *result &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: adjacent_find find find_first_of find_if search_n</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_013.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark18">find_first_of</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator find_first_of( iterator start, iterator end, iterator find_start, iterator find_end );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator find_first_of( iterator start, iterator end, iterator find_start, iterator find_end, BinPred bp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The find_first_of() function searches for the first occurence of any element between</p><p class="s11" style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">find_start <span class="p">and </span>find_end<span class="p">. The data that are searched are those between </span>start <span class="p">and </span>end<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If any element between <i>find_start </i>and <i>find_end </i>is found, an iterator pointing to that element is returned. Otherwise, an iterator pointing to <i>end </i>is returned.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code searches for a 9, 4, or 7 in an array of integers:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">int nums[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 93%;text-align: left;">int* result; int start = 0; int end = 10;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">int targets[] = { 9, 4, 7 };</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">result = find_first_of( nums + start, nums + end, targets + 0, targets</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">+ 2 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">if( *result == nums[end] ) {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;Did not find any of { 9, 4, 7 }&quot; &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">} else {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;Found a matching target: &quot; &lt;&lt; *result &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: adjacent_find find</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">find_end find_if</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">(Standard C String and Character) strpbrk</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_014.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark19">find_if</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator find_if( iterator start, iterator end, UnPred up );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The find_if() function searches for the first element between <i>start </i>and <i>end </i>for which the unary predicate <i>up </i>returns true.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If such an element is found, an iterator pointing to that element is returned. Otherwise, an iterator pointing to <i>end </i>is returned.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses find_if() and a &quot;greater-than-zero&quot; unary predicate to the first positive, non-zero number in a list of numbers:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">int nums[] = { 0, -1, -2, -3, -4, 342, -5 };</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 93%;text-align: left;">int* result; int start = 0; int end = 7;</p><p class="s2" style="padding-left: 6pt;text-indent: 6pt;line-height: 93%;text-align: left;">result = find_if( nums + start, nums + end, bind2nd(greater&lt;int&gt;(), 0));</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">if( *result == nums[end] ) {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;Did not find any number greater than zero&quot; &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">} else {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;Found a positive non-zero number: &quot; &lt;&lt; *result &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: adjacent_find equal</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">find find_end find_first_of search_n</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_015.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark20">for_each</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">UnaryFunction for_each( iterator start, iterator end, UnaryFunction f</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The for_each() algorithm applies the function <i>f </i>to each of the elements between <i>start </i>and <i>end</i>. The return value of for_each() is <i>f</i>.</p><p class="s12" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code snippets define a unary function then use it to increment all of the elements of an array:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 6pt;text-indent: 6pt;line-height: 94%;text-align: left;">template&lt;class TYPE&gt; struct increment : public unary_function&lt;TYPE, void&gt; {</p><p class="s2" style="padding-left: 36pt;text-indent: -12pt;line-height: 94%;text-align: left;">void operator() (TYPE&amp; x) { x++;</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">};</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">...</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">int nums[] = {3, 4, 2, 9, 15, 267};</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const int N = 6;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 93%;text-align: left;">cout &lt;&lt; &quot;Before, nums[] is: &quot;; for( int i = 0; i &lt; N; i++ ) {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; nums[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">for_each( nums, nums + N, increment&lt;int&gt;() ); cout &lt;&lt; &quot;After, nums[] is: &quot;;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( int i = 0; i &lt; N; i++ ) { cout &lt;&lt; nums[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The above code displays the following output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Before, nums[] is: 3 4 2 9 15 267</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">After, nums[] is: 4 5 3 10 16 268</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_016.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark21">generate</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void generate( iterator start, iterator end, Generator g );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The generate() function runs the Generator function object <i>g </i>a number of times, saving the result of each execution in the range [<i>start</i>,<i>end</i>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: copy</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">fill</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">generate_n transform</p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark22">generate_n</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator generate_n( iterator result, size_t num, Generator g );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The generate_n() function runs the Generator function object <i>g num </i>times, saving the result of each execution in <i>result</i>, (<i>result</i>+1), etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">generate</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_017.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark23">includes</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">bool includes( iterator start1, iterator end1, iterator start2, iterator end2 );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">bool includes( iterator start1, iterator end1, iterator start2, iterator end2, StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The includes() algorithm returns true if every element in [<i>start2</i>,<i>end2</i>) is also in [<i>start1</i>,<i>end1</i>). Both of the given ranges must be sorted in ascending order.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">By default, the &lt; operator is used to compare elements. If the strict weak ordering function object <i>cmp </i>is given, then it is used instead.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">includes() runs in linear time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: set_difference set_intersection set_symmetric_difference set_union</p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark24">inner_product</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;numeric&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">TYPE inner_product( iterator start1, iterator end1, iterator start2, TYPE val );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">TYPE inner_product( iterator start1, iterator end1, iterator start2, TYPE val, BinaryFunction f1, BinaryFunction f2 );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The inner_product() function computes the inner product of [<i>start1</i>,<i>end1</i>) and a range of the same size starting at <i>start2</i>.</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">inner_product() runs in linear time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">accumulate</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">adjacent_difference count</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">partial_sum</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_018.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark25">inplace_merge</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">inline void inplace_merge( iterator start, iterator middle, iterator end );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">inline void inplace_merge( iterator start, iterator middle, iterator end, StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The inplace_merge() function is similar to the merge() function, but instead of creating a new sorted range of elements, inplace_merge() alters the existing ranges to perform the merge in-place.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: merge</p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark26">is_heap</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">bool is_heap( iterator start, iterator end );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">bool is_heap( iterator start, iterator end, StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The is_heap() function returns true if the given range [<i>start</i>,<i>end</i>) is a heap.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the strict weak ordering comparison function object <i>cmp </i>is given, then it is used instead of the &lt; operator to compare elements.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">is_heap() runs in linear time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">make_heap pop_heap push_heap sort_heap</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_019.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark27">is_sorted</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">bool is_sorted( iterator start, iterator end );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">bool is_sorted( iterator start, iterator end, StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The is_sorted() algorithm returns true if the elements in the range [<i>start</i>,<i>end</i>) are sorted in ascending order.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">By default, the &lt; operator is used to compare elements. If the strict weak order function object <i>cmp </i>is given, then it is used instead.</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">is_sorted() runs in linear time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">binary_search</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">partial_sort partial_sort_copy sort</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">stable_sort</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_020.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark28">iter_swap</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">inline void iter_swap( iterator a, iterator b );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">A call to iter_swap() exchanges the values of two elements exactly as a call to</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">swap( *a, *b );</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">would.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">swap</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">swap_ranges</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_021.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark29">lexicographical_compare</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">bool lexicographical_compare( iterator start1, iterator end1, iterator start2, iterator end2 );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">bool lexicographical_compare( iterator start1, iterator end1, iterator start2, iterator end2, BinPred p );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The lexicographical_compare() function returns true if the range of elements [<i>start1</i>,<i>end1</i>) is lexicographically less than the range of elements [<i>start2</i>,<i>end2</i>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If you&#39;re confused about what lexicographic means, it might help to know that dictionaries are ordered lexicographically.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">lexicographical_compare() runs in linear time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">equal lexicographical_compare_3way mismatch</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">search</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_022.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark30">lexicographical_compare_3way</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">int lexicographical_compare_3way( iterator start1, iterator end1, iterator start2, iterator end2 );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The lexicographical_compare_3way() function compares the first range, defined by [<i>start1</i>,<i>end1</i>) to the second range, defined by [<i>start2</i>,<i>end2</i>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the first range is lexicographically less than the second range, this function returns a negative number. If the first range is lexicographically greater than the second, a positive number is returned. Zero is returned if neither range is lexicographically greater than the other.</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">lexicographical_compare_3way() runs in linear time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">lexicographical_compare</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_023.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark31">lower_bound</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator lower_bound( iterator first, iterator last, const TYPE&amp; val</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">);</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator lower_bound( iterator first, iterator last, const TYPE&amp; val, CompFn f );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The lower_bound() function is a type of binary_search(). This function searches for the first place that <i>val </i>can be inserted into the ordered range defined by <i>first </i>and <i>last </i>that will not mess up the existing ordering.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The return value of lower_bound() is an iterator that points to the location where <i>val </i>can be safely inserted. Unless the comparison function <i>f </i>is specified, the &lt; operator is used for ordering.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses lower_bound() to insert the number 7 into an ordered vector of integers:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">vector&lt;int&gt; nums; nums.push_back( -242 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">nums.push_back( -1 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">nums.push_back( 0 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">nums.push_back( 5 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">nums.push_back( 8 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">nums.push_back( 8 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">nums.push_back( 11 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;Before nums is: &quot;;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( unsigned int i = 0; i &lt; nums.size(); i++ ) { cout &lt;&lt; nums[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 93%;text-align: left;">cout &lt;&lt; endl; vector&lt;int&gt;::iterator result; int new_val = 7;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 93%;text-align: left;">result = lower_bound( nums.begin(), nums.end(), new_val ); nums.insert( result, new_val );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;After, nums is: &quot;;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( unsigned int i = 0; i &lt; nums.size(); i++ ) { cout &lt;&lt; nums[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The above code produces the following output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Before nums is: -242 -1 0 5 8 8 11</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">After, nums is: -242 -1 0 5 7 8 8 11</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: binary_search equal_range</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_024.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark32">make_heap</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void make_heap( iterator start, iterator end );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">void make_heap( iterator start, iterator end, StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><span class="p">T</span><span class="s14">he make_heap() function turns the given range of elements [</span>start<span class="s12">,</span>end<span class="s12">) into a heap.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the strict weak ordering comparison function object <i>cmp </i>is given, then it is used instead of the &lt; operator to compare elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">make_heap() runs in linear time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">is_heap        pop_heap       push_heap       sort_heap</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_025.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark33">max</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const TYPE&amp; max( const TYPE&amp; x, const TYPE&amp; y );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const TYPE&amp; max( const TYPE&amp; x, const TYPE&amp; y, BinPred p );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The max() function returns the greater of <i>x </i>and <i>y</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 6pt;text-indent: 0pt;line-height: 221%;text-align: left;">If the binary predicate <i>p </i>is given, then it will be used instead of the &lt; operator to compare the two elements. Example code:</p><p class="s12" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code snippet displays various uses of the max() function:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">cout &lt;&lt; &quot;Max of 1 and 9999 is &quot; &lt;&lt; max( 1, 9999) &lt;&lt; endl; cout &lt;&lt; &quot;Max of &#39;a&#39; and &#39;b&#39; is &quot; &lt;&lt; max( &#39;a&#39;, &#39;b&#39;) &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;Max of 3.14159 and 2.71828 is &quot; &lt;&lt; max( 3.14159, 2.71828) &lt;&lt;</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s12" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When run, this code displays:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">Max of 1 and 9999 is 9999 Max of &#39;a&#39; and &#39;b&#39; is b</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Max of 3.14159 and 2.71828 is 3.14159</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">max_element     min          min_element</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_026.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark34">max_element</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator max_element( iterator start, iterator end );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator max_element( iterator start, iterator end, BinPred p );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The max_element() function returns an iterator to the largest element in the range [<i>start</i>,<i>end</i>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the binary predicate <i>p </i>is given, then it will be used instead of the &lt; operator to determine the largest element.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Example code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses the max_element() function to determine the largest integer in an array and the largest character in a vector of characters:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 93%;text-align: left;">int array[] = { 3, 1, 4, 1, 5, 9 }; unsigned int array_size = 6;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;Max element in array is &quot; &lt;&lt; *max_element( array, array</p><p class="s2" style="padding-left: 12pt;text-indent: -6pt;line-height: 94%;text-align: left;">+array_size) &lt;&lt; endl; vector&lt;char&gt; v;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">v.push_back(&#39;a&#39;); v.push_back(&#39;b&#39;); v.push_back(&#39;c&#39;); v.push_back(&#39;d&#39;); cout &lt;&lt; &quot;Max element in the vector v is &quot; &lt;&lt; *max_element( v.begin(),</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">v.end() ) &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When run, the above code displays this output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Max element in array is 9</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Max element in the vector v is d</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: max</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">min min_element</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_027.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark35">merge</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator merge( iterator start1, iterator end1, iterator start2, iterator end2, iterator result );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator merge( iterator start1, iterator end1, iterator start2, iterator end2, iterator result, StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The merge() function combines two sorted ranges [<i>start1</i>,<i>end1</i>) and [<i>start2</i>,<i>end2</i>) into a single sorted range, stored starting at <i>result</i>. The return value of this function is an iterator to the end of the merged range.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the strict weak ordering function object <i>cmp </i>is given, then it is used in place of the &lt; operator to perform comparisons between elements.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">merge() runs in linear time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">inplace_merge set_union</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">sort</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_028.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark36">min</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const TYPE&amp; min( const TYPE&amp; x, const TYPE&amp; y );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const TYPE&amp; min( const TYPE&amp; x, const TYPE&amp; y, BinPred p );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The min() function, unsurprisingly, returns the smaller of <i>x </i>and <i>y</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">By default, the &lt; operator is used to compare the two elements. If the binary predicate <i>p </i>is given, it will be used instead.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: max max_element min_element</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_029.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark37">min_element</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator min_element( iterator start, iterator end );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator min_element( iterator start, iterator end, BinPred p );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The min_element() function returns an iterator to the smallest element in the range [<i>start</i>,<i>end</i>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the binary predicate <i>p </i>is given, then it will be used instead of the &lt; operator to determine the smallest element.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">max max_element min</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_030.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark38">mismatch</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">pair &lt;iterator1,iterator2&gt; mismatch( iterator start1, iterator end1, iterator start2 );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">pair &lt;iterator1,iterator2&gt; mismatch( iterator start1, iterator end1, iterator start2, BinPred p );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The mismatch() function compares the elements in the range defined by [<i>start1</i>,<i>end1</i>) to the elements in a range of the same size starting at <i>start2</i>. The return value of mismatch() is the first location where the two ranges differ.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the optional binary predicate <i>p </i>is given, then it is used to compare elements from the two ranges.</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">The mismatch() algorithm runs in linear time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">equal</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">find lexicographical_compare search</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_031.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark39">next_permutation</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">bool next_permutation( iterator start, iterator end ); bool next_permutation( iterator start, iterator end,</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The next_permutation() function attempts to transform the given range of elements [<i>start</i>,<i>end</i>) into the next lexicographically greater permutation of elements. If it succeeds, it returns true, otherwise, it returns false.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If a strict weak ordering function object <i>cmp </i>is provided, it is used in lieu of the &lt; operator when comparing elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">prev_permutation random_sample random_sample_n random_shuffle</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_032.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark40">nth_element</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">void nth_element( iterator start, iterator middle, iterator end ); void nth_element( iterator start, iterator middle, iterator end,</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The nth_element() function semi-sorts the range of elements defined by [<i>start</i>,<i>end</i>). It puts the element that <i>middle </i>points to in the place that it would be if the entire range was sorted, and it makes sure that none of the elements before that element are greater than any of the elements that come after that element.</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">nth_element() runs in linear time on average. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">partial_sort</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_033.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark41">partial_sort</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">void partial_sort( iterator start, iterator middle, iterator end ); void partial_sort( iterator start, iterator middle, iterator end,</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The partial_sort() function arranges the first N elements of the range [<i>start</i>,<i>end</i>) in ascending order. N is defined as the number of elements between <i>start </i>and <i>middle</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">By default, the &lt; operator is used to compare two elements. If the strict weak ordering comparison function <i>cmp </i>is given, it is used instead.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">binary_search is_sorted nth_element partial_sort_copy sort</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;">stable_sort</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_034.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark42">partial_sort_copy</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator partial_sort_copy( iterator start, iterator end, iterator result_start, iterator result_end );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator partial_sort_copy( iterator start, iterator end, iterator result_start, iterator result_end, StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The partial_sort_copy() algorithm behaves like partial_sort(), except that instead of partially sorting the range in-place, a copy of the range is created and the sorting takes place in the copy. The initial range is defined by [<i>start</i>,<i>end</i>) and the location of the copy is defined by [<i>result_start</i>,<i>result_end</i>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">partial_sort_copy() returns an iterator to the end of the copied, partially-sorted range of elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: binary_search is_sorted partial_sort sort stable_sort</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_035.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark43">partial_sum</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;numeric&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">iterator partial_sum( iterator start, iterator end, iterator result ); iterator partial_sum( iterator start, iterator end, iterator result,</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">BinOp p );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The partial_sum() function calculates the partial sum of a range defined by [<i>start</i>,<i>end</i>), storing the output at <i>result</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><span class="s1">•  </span>start <span class="p">is assigned to *</span>result<span class="p">, the sum of *</span>start <span class="p">and *(</span>start <span class="p">+ 1) is assigned to</span></p><p style="padding-left: 6pt;text-indent: 35pt;line-height: 200%;text-align: left;">*(<i>result </i>+ 1), etc. partial_sum() runs in linear time.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">accumulate adjacent_difference count inner_product</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_036.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark44">partition</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator partition( iterator start, iterator end, Predicate p );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The partition() algorithm re-orders the elements in [<i>start</i>,<i>end</i>) such that the elements for which the predicate <i>p </i>returns true come before the elements for which <i>p </i>returns false.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">In other words, partition() uses <i>p </i>to divide the elements into two groups.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 200%;text-align: left;">The return value of partition() is an iterator to the first element for which <i>p </i>returns false. parition() runs in linear time.</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: stable_partition</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_037.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark45">pop_heap</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void pop_heap( iterator start, iterator end );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void pop_heap( iterator start, iterator end, StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The pop_heap() function removes the larges element (defined as the element at the front of the heap) from the given heap.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the strict weak ordering comparison function object <i>cmp </i>is given, then it is used instead of the &lt; operator to compare elements.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">pop_heap() runs in logarithmic time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">is_heap make_heap push_heap sort_heap</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_038.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark46">prev_permutation</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">bool prev_permutation( iterator start, iterator end ); bool prev_permutation( iterator start, iterator end,</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The prev_permutation() function attempts to transform the given range of elements [<i>start</i>,<i>end</i>) into the next lexicographically smaller permutation of elements. If it succeeds, it returns true, otherwise, it returns false.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If a strict weak ordering function object <i>cmp </i>is provided, it is used instead of the &lt; operator when comparing elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: next_permutation random_sample random_sample_n random_shuffle</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_039.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark47">push_heap</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void push_heap( iterator start, iterator end );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">void push_heap( iterator start, iterator end, StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The push_heap() function adds an element (defined as the last element before <i>end</i>) to a heap (defined as the range of elements between [<i>start</i>,&#39;&#39;end-1).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the strict weak ordering comparison function object <i>cmp </i>is given, then it is used instead of the &lt; operator to compare elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">push_heap() runs in logarithmic time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: is_heap make_heap</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">pop_heap sort_heap</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_040.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark48">random_sample</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">iterator random_sample( iterator start1, iterator end1, iterator start2, iterator end2 );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">iterator random_sample( iterator start1, iterator end1, iterator start2, iterator end2, RandomNumberGenerator&amp; rnd );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The random_sample() algorithm randomly copies elements from [<i>start1</i>,<i>end1</i>) to [<i>start2</i>,<i>end2</i>). Elements are chosen with uniform probability and elements from the input range will appear at most once in the output range.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If a random number generator function object <i>rnd </i>is supplied, then it will be used instead of an internal random number generator.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 202%;text-align: left;">The return value of random_sample() is an iterator to the end of the output range. random_sample() runs in linear time.</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: next_permutation prev_permutation</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">random_sample_n random_shuffle</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_041.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark49">random_sample_n</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator random_sample_n( iterator start, iterator end, iterator result, size_t N );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator random_sample_n( iterator start, iterator end, iterator result, size_t N, RandomNumberGenerator&amp; rnd );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The random_sample_n() algorithm randomly copies <i>N </i>elements from [<i>start</i>,<i>end</i>) to <i>result</i>. Elements are chosen with uniform probability and elements from the input range will appear at most once in the output range. <b>Element order is preserved </b>from the input range to the output range.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If a random number generator function object <i>rnd </i>is supplied, then it will be used instead of an internal random number generator.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 202%;text-align: left;">The return value of random_sample_n() is an iterator to the end of the output range. random_sample_n() runs in linear time.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">next_permutation prev_permutation random_sample random_shuffle</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_042.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark50">random_shuffle</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">void random_shuffle( iterator start, iterator end ); void random_shuffle( iterator start, iterator end,</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">RandomNumberGenerator&amp; rnd );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The random_shuffle() function randomly re-orders the elements in the range [<i>start</i>,<i>end</i>). If a random number generator function object <i>rnd </i>is supplied, it will be used instead of an internal random number generator.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: next_permutation prev_permutation random_sample random_sample_n</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_043.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark51">remove</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator remove( iterator start, iterator end, const TYPE&amp; val );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The remove() algorithm removes all of the elements in the range [<i>start</i>,<i>end</i>) that are equal to <i>val</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The return value of this function is an iterator to the last element of the new sequence that should contain no elements equal to <i>val</i>.</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">The remove() function runs in linear time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">remove_copy</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">remove_copy_if remove_if unique unique_copy</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_044.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark52">remove_copy</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">iterator remove_copy( iterator start, iterator end, iterator result, const TYPE&amp; val );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The remove_copy() algorithm copies the range [<i>start</i>,<i>end</i>) to <i>result </i>but omits any elements that are equal to <i>val</i>.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">remove_copy() returns an iterator to the end of the new range, and runs in linear time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">copy remove</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">remove_copy_if remove_if</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_045.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark53">remove_copy_if</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator remove_copy_if( iterator start, iterator end, iterator result, Predicate p );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The remove_copy_if() function copies the range of elements [<i>start</i>,<i>end</i>) to <i>result</i>, omitting any elements for which the predicate function <i>p </i>returns true.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 202%;text-align: left;">The return value of remove_copy_if() is an iterator the end of the new range. remove_copy_if() runs in linear time.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">remove remove_copy remove_if</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_046.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark54">remove_if</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator remove_if( iterator start, iterator end, Predicate p );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The remove_if() function removes all elements in the range [<i>start</i>,<i>end</i>) for which the predicate <i>p </i>returns true.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 200%;text-align: left;">The return value of this function is an iterator to the last element of the pruned range. remove_if() runs in linear time.</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: remove remove_copy remove_copy_if</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_047.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark55">replace</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">void replace( iterator start, iterator end, const TYPE&amp; old_value, const TYPE&amp; new_value );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The replace() function sets every element in the range [<i>start</i>,<i>end</i>) that is equal to</p><p class="s11" style="padding-left: 6pt;text-indent: 0pt;line-height: 200%;text-align: left;">old_value <span class="p">to have </span>new_value <span class="p">instead. replace() runs in linear time.</span></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">replace_copy replace_copy_if replace_if</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_048.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark56">replace_copy</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">iterator replace_copy( iterator start, iterator end, iterator result, const TYPE&amp; old_value, const TYPE&amp; new_value );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The replace_copy() function copies the elements in the range [<i>start</i>,<i>end</i>) to the destination</p><p class="s11" style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">result<span class="p">. Any elements in the range that are equal to </span>old_value <span class="p">are replaced with </span>new_value<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">replace</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_049.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark57">replace_copy_if</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">iterator replace_copy_if( iterator start, iterator end, iterator result, Predicate p, const TYPE&amp; new_value );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The replace_copy_if() function copies the elements in the range [<i>start</i>,<i>end</i>) to the destination <i>result</i>. Any elements for which the predicate <i>p </i>is true are replaced with <i>new_value</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: replace</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_050.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark58">replace_if</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">void replace_if( iterator start, iterator end, Predicate p, const TYPE&amp; new_value );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The replace_if() function assigns every element in the range [<i>start</i>,<i>end</i>) for which the predicate function <i>p </i>returns true the value of <i>new_value</i>.</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">This function runs in linear time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">replace</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_051.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark59">reverse</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void reverse( iterator start, iterator end );</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">The reverse() algorithm reverses the order of elements in the range [<i>start</i>,<i>end</i>). Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">reverse_copy</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_052.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark60">reverse_copy</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator reverse_copy( iterator start, iterator end, iterator result );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The reverse_copy() algorithm copies the elements in the range [<i>start</i>,<i>end</i>) to <i>result </i>such that the elements in the new range are in reverse order.</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">The return value of the reverse_copy() function is an iterator the end of the new range. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">reverse</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_053.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark61">rotate</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">inline iterator rotate( iterator start, iterator middle, iterator end</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The rotate() algorithm moves the elements in the range [<i>start</i>,<i>end</i>) such that the <i>middle</i></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 200%;text-align: left;">element is now where <i>start </i>used to be, (<i>middle</i>+1) is now at (<i>start</i>+1), etc. The return value of rotate() is an iterator to <i>start </i>+ (<i>end</i>-<i>middle</i>).</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">rotate() runs in linear time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">rotate_copy</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_054.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark62">rotate_copy</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator rotate_copy( iterator start, iterator middle, iterator end, iterator result );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The rotate_copy() algorithm is similar to the rotate() algorithm, except that the range of elements is copied to <i>result </i>before being rotated.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: rotate</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_055.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark63">search</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator search( iterator start1, iterator end1, iterator start2, iterator end2 );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator search( iterator start1, iterator end1, iterator start2, iterator end2, BinPred p );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The search() algorithm looks for the elements [<i>start2</i>,<i>end2</i>) in the range [<i>start1</i>,<i>end1</i>). If the optional binary predicate <i>p </i>is provided, then it is used to perform comparisons between elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If search() finds a matching subrange, then it returns an iterator to the beginning of that matching subrange. If no match is found, an iterator pointing to <i>end1 </i>is returned.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">In the worst case, search() runs in quadratic time, on average, it runs in linear time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: equal</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">find</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">lexicographical_compare mismatch</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">search_n</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_056.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark64">search_n</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator search_n( iterator start, iterator end, size_t num, const TYPE&amp; val );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator search_n( iterator start, iterator end, size_t num, const TYPE&amp; val, BinPred p );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The search_n() function looks for <i>num </i>occurances of <i>val </i>in the range [<i>start</i>,<i>end</i>).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If <i>num </i>consecutive copies of <i>val </i>are found, search_n() returns an iterator to the beginning of that sequence. Otherwise it returns an iterator to <i>end</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the optional binary predicate <i>p </i>is given, then it is used to perform comparisons between elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">This function runs in linear time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: find_end find_if</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">search</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_057.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark65">set_difference</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator set_difference( iterator start1, iterator end1, iterator start2, iterator end2, iterator result );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator set_difference( iterator start1, iterator end1, iterator start2, iterator end2, iterator result, StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The set_difference() algorithm computes the difference between two sets defined by [<i>start1</i>,<i>end1</i>) and [<i>start2</i>,<i>end2</i>) and stores the difference starting at <i>result</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Both of the sets, given as ranges, must be sorted in ascending order.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The return value of set_difference() is an iterator to the end of the result range.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the strict weak ordering comparison function object <i>cmp </i>is not specified, set_difference() will use the &lt; operator to compare elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: includes set_intersection</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">set_symmetric_difference set_union</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_058.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark66">set_intersection</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">iterator set_intersection( iterator start1, iterator end1, iterator start2, iterator end2, iterator result );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">iterator set_intersection( iterator start1, iterator end1, iterator start2, iterator end2, iterator result, StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The set_intersection() algorithm computes the intersection of the two sets defined by [<i>start1</i>,<i>end1</i>) and [<i>start2</i>,<i>end2</i>) and stores the intersection starting at <i>result</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Both of the sets, given as ranges, must be sorted in ascending order.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The return value of set_intersection() is an iterator to the end of the intersection range.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the strict weak ordering comparison function object <i>cmp </i>is not specified, set_intersection() will use the &lt; operator to compare elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: includes set_difference</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">set_symmetric_difference set_union</p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark67">set_symmetric_difference</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator set_symmetric_difference( iterator start1, iterator end1, iterator start2, iterator end2, iterator result );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator set_symmetric_difference( iterator start1, iterator end1, iterator start2, iterator end2, iterator result, StrictWeakOrdering cmp</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The set_symmetric_difference() algorithm computes the symmetric difference of the two sets defined by [<i>start1</i>,<i>end1</i>) and [<i>start2</i>,<i>end2</i>) and stores the difference starting at <i>result</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Both of the sets, given as ranges, must be sorted in ascending order.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The return value of set_symmetric_difference() is an iterator to the end of the result range.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the strict weak ordering comparison function object <i>cmp </i>is not specified, set_symmetric_difference() will use the &lt; operator to compare elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: includes set_difference</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">set_intersection set_union</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_059.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark68">set_union</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator set_union( iterator start1, iterator end1, iterator start2, iterator end2, iterator result );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator set_union( iterator start1, iterator end1, iterator start2, iterator end2, iterator result, StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The set_union() algorithm computes the union of the two ranges [<i>start1</i>,<i>end1</i>) and [<i>start2</i>,<i>end2</i>) and stores it starting at <i>result</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 202%;text-align: left;">The return value of set_union() is an iterator to the end of the union range. set_union() runs in linear time.</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: includes merge</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">set_difference set_intersection</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">set_symmetric_difference</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_060.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark69">sort</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void sort( iterator start, iterator end );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void sort( iterator start, iterator end, StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The sort() algorithm sorts the elements in the range [<i>start</i>,<i>end</i>) into ascending order. If two elements are equal, there is no guarantee what order they will be in.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the strict weak ordering function object <i>cmp </i>is given, then it will be used to compare two objects instead of the &lt; operator.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The algorithm behind sort() is the <i>introsort </i>algorithm. sort() runs in O(N log(N)) time (average and worst case) which is faster than polynomial time but slower than linear time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Example code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code sorts a vector of integers into ascending order:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">vector&lt;int&gt; v; v.push_back( 23 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">v.push_back( -1 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">v.push_back( 9999 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">v.push_back( 0 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">v.push_back( 4 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;Before sorting: &quot;;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( unsigned int i = 0; i &lt; v.size(); i++ ) { cout &lt;&lt; v[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 93%;text-align: left;">sort( v.begin(), v.end() ); cout &lt;&lt; &quot;After sorting: &quot;;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( unsigned int i = 0; i &lt; v.size(); i++ ) { cout &lt;&lt; v[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When run, the above code displays this output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Before sorting: 23 -1 9999 0 4</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">After sorting: -1 0 4 23 9999</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Alternatively, the following code uses the sort() function to sort a normal array of integers, and displays the same output as the previous example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">int array[] = { 23, -1, 9999, 0, 4 };</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">unsigned int array_size = 5; cout &lt;&lt; &quot;Before sorting: &quot;;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( unsigned int i = 0; i &lt; array_size; i++ ) { cout &lt;&lt; array[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-top: 4pt;padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 93%;text-align: left;">sort( array, array + array_size ); cout &lt;&lt; &quot;After sorting: &quot;;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( unsigned int i = 0; i &lt; array_size; i++ ) { cout &lt;&lt; array[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">This next example shows how to use sort() with a user-specified comparison function. The function <b>cmp </b>is defined to do the opposite of the &lt; operator. When sort() is called with <b>cmp </b>used as the comparison function, the result is a list sorted in descending, rather than ascending, order:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 93%;text-align: left;">bool cmp( int a, int b ) { return a &gt; b;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">...</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; v;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( int i = 0; i &lt; 10; i++ ) { v.push_back(i);</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;Before: &quot;;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( int i = 0; i &lt; 10; i++ ) { cout &lt;&lt; v[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">sort( v.begin(), v.end(), cmp ); cout &lt;&lt; &quot;After: &quot;;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( int i = 0; i &lt; 10; i++ ) { cout &lt;&lt; v[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: binary_search is_sorted merge partial_sort</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">partial_sort_copy stable_sort</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">(Other Standard C Functions) qsort</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_061.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark70">sort_heap</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void sort_heap( iterator start, iterator end );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">void sort_heap( iterator start, iterator end, StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The sort_heap() function turns the heap defined by [<i>start</i>,<i>end</i>) into a sorted range.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the strict weak ordering comparison function object <i>cmp </i>is given, then it is used instead of the &lt; operator to compare elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">is_heap make_heap pop_heap push_heap</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_062.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark71">stable_partition</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">iterator stable_partition( iterator start, iterator end, Predicate p );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The stable_partition() function behaves similarily to partition(). The difference between the two algorithms is that stable_partition() will preserve the initial ordering of the elements in the two groups.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: partition</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_063.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark72">stable_sort</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void stable_sort( iterator start, iterator end );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">void stable_sort( iterator start, iterator end, StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The stable_sort() algorithm is like the sort() algorithm, in that it sorts a range of elements into ascending order. Unlike sort(), however, stable_sort() will preserve the original ordering of elements that are equal to eachother.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">This functionality comes at a small cost, however, as stable_sort() takes a few more comparisons that sort() in the worst case: N (log N)^2 instead of N log N.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">binary_search is_sorted partial_sort partial_sort_copy sort</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_064.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark73">swap</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void swap( Assignable&amp; a, Assignable&amp; b );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The swap() function swaps the values of <i>a </i>and <i>b</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">swap() expects that its arguments will conform to the Assignable model; that is, they should have a copy constructor and work with the = operator. This function performs one copy and two assignments.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: copy copy_backward copy_n iter_swap swap_ranges</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_065.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark74">swap_ranges</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator swap_ranges( iterator start1, iterator end1, iterator start2</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The swap_ranges() function exchanges the elements in the range [<i>start1</i>,<i>end1</i>) with the range of the same size starting at <i>start2</i>.</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">The return value of swap_ranges() is an iterator to <i>start2 </i>+ (<i>end1</i>-<i>start1</i>). Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iter_swap</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">swap</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_066.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark75">transform</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">iterator transform( iterator start, iterator end, iterator result, UnaryFunction f );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">iterator transform( iterator start1, iterator end1, iterator start2, iterator result, BinaryFunction f );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The transform() algorithm applies the function <i>f </i>to some range of elements, storing the result of each application of the function in <i>result</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The first version of the function applies <i>f </i>to each element in [<i>start</i>,<i>end</i>) and assigns the first output of the function to <i>result</i>, the second output to (<i>result</i>+1), etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The second version of the transform() works in a similar manner, except that it is given two ranges of elements and calls a binary function on a pair of elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: copy</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">fill generate</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_067.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark76">unique</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator unique( iterator start, iterator end );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator unique( iterator start, iterator end, BinPred p );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The unique() algorithm removes all consecutive duplicate elements from the range [<i>start</i>,<i>end</i>). If the binary predicate <i>p </i>is given, then it is used to test to test two elements to see if they are duplicates.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 202%;text-align: left;">The return value of unique() is an iterator to the end of the modified range. unique() runs in linear time.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">adjacent_find remove unique_copy</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_068.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark77">unique_copy</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">iterator unique_copy( iterator start, iterator end, iterator result ); iterator unique_copy( iterator start, iterator end, iterator result,</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">BinPred p );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The unique_copy() function copies the range [<i>start</i>,<i>end</i>) to <i>result</i>, removing all consecutive duplicate elements. If the binary predicate <i>p </i>is provided, then it is used to test two elements to see if they are duplicates.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 200%;text-align: left;">The return value of unique_copy() is an iterator to the end of the new range. unique_copy() runs in linear time.</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: adjacent_find remove</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">unique</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_069.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark78">upper_bound</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;algorithm&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">iterator upper_bound( iterator start, iterator end, const TYPE&amp; val ); iterator upper_bound( iterator start, iterator end, const TYPE&amp; val,</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">StrictWeakOrdering cmp );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The upper_bound() algorithm searches the ordered range [<i>start</i>,<i>end</i>) for the last location that <i>val </i>could be inserted without disrupting the order of the range.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">If the strict weak ordering function object <i>cmp </i>is given, it is used to compare elements instead of the &lt; operator.</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">upper_bound() runs in logarithmic time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">binary_search</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">equal_range</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part4.htm">&lt; Previous</a><span> | </span><a href="../Cpp_STL_ReferenceManual.html">Contents</a><span> | </span><a href="part6.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
