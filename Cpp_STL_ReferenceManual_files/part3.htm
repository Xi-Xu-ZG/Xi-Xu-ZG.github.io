<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>About the C++ Standard Template Library</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part2.htm">&lt; Previous</a><span> | </span><a href="../Cpp_STL_ReferenceManual.html">Contents</a><span> | </span><a href="part4.htm">Next &gt;</a></p><h2 style="padding-top: 4pt;padding-left: 82pt;text-indent: 0pt;text-align: left;"><a name="bookmark1">About the C++ Standard Template Library</a></h2><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The C++ STL (Standard Template Library) is a generic collection of class templates and algorithms that allow programmers to easily implement standard data structures like queues, lists, and stacks.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The C++ STL provides programmers with the following constructs, grouped into three categories:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">Sequences</span></p><p class="s1" style="padding-left: 62pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">C++ Vectors</span></p><p class="s1" style="padding-left: 62pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">C++ Lists</span></p><p class="s1" style="padding-left: 62pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">C++ Double-Ended Queues</span></p><p class="s1" style="text-indent: 0pt;line-height: 14pt;text-align: right;">•  <span class="p">Container Adapters</span></p><p class="s1" style="text-indent: 0pt;line-height: 14pt;text-align: right;">•  <span class="p">C++ Stacks</span></p><p class="s1" style="text-indent: 0pt;line-height: 14pt;text-align: right;">•  <span class="p">C++ Queues</span></p><p class="s1" style="padding-left: 62pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">C++ Priority Queues</span></p><p class="s1" style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">Associative Containers</span></p><p class="s1" style="padding-left: 62pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">C++ Bitsets</span></p><p class="s1" style="padding-left: 62pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">C++ Maps</span></p><p class="s1" style="padding-left: 62pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">C++ Multimaps</span></p><p class="s1" style="padding-left: 62pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">C++ Sets</span></p><p class="s1" style="padding-left: 62pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">C++ Multisets</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The idea behind the C++ STL is that the hard part of using complex data structures has already been completed. If a programmer would like to use a stack of integers, all that she has to do is use this code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">stack&lt;int&gt; myStack;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">With minimal effort, she can now push() and pop() integers onto this stack. Through the magic of C++ Templates, she could specify any data type, not just integers. The STL Stack class will provide generic functionality of a stack, regardless of the data in the stack.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">In addition, the STL also provides a bunch of useful algorithms -- like searching, sorting, and general-purpose iterating algorithms -- that can be used on a variety of data structures.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part2.htm">&lt; Previous</a><span> | </span><a href="../Cpp_STL_ReferenceManual.html">Contents</a><span> | </span><a href="part4.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
