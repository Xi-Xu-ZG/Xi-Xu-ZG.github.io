<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Priority queue constructors</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part18.htm">&lt; Previous</a><span> | </span><a href="../Cpp_STL_ReferenceManual.html">Contents</a><span> | </span><a href="part20.htm">Next &gt;</a></p><h3 style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark158">Priority queue constructors</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;queue&gt;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">priority_queue( const Compare&amp; cmp = Compare(), const Container&amp; c = Container() );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">priority_queue( input_iterator start, input_iterator end, const Compare&amp; comp = Compare(), const Container&amp; c = Container() );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Priority queues can be constructed with an optional compare function <i>cmp </i>and an optional container <i>c</i>. If <i>start </i>and <i>end </i>are specified, the priority queue will be constructed with the elements between <i>start </i>and <i>end</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_139.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark159">empty</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;queue&gt; bool empty() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The empty() function returns true if the priority queue has no elements, false otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses empty() as the stopping condition on a (C/C++ Keywords) while loop to clear a priority queue and display its contents in reverse order:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; v;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( int i = 0; i &lt; 5; i++ ) { v.push_back(i);</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">while( !v.empty() ) {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 93%;text-align: left;">cout &lt;&lt; v.back() &lt;&lt; endl; v.pop_back();</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">size</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_140.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark160">pop</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">#include &lt;queue&gt; void pop();</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">The function pop() removes the top element of the priority queue and discards it. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">push</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">top</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_141.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark161">push</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;queue&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void push( const TYPE&amp; val );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The function push() adds <i>val </i>to the end of the current priority queue.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses the push() function to add ten integers to the end of a queue:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;">queue&lt;int&gt; q;</p><p class="s2" style="padding-left: 36pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( int i=0; i &lt; 10; i++ ) q.push(i);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_142.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark162">size</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;queue&gt;</p><p class="s16" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_type <span class="s2">size() const;</span></p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">The size() function returns the number of elements in the current priority queue. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(C++ Strings) capacity</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">empty</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">(C++ Strings) length</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">(C++ Multimaps) max_size (C++ Strings) resize</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="573" height="1" alt="image" src="Image_143.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark163">top</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;queue&gt; TYPE&amp; top();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The function top() returns a reference to the top element of the priority queue.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code removes all of the elements from a stack and uses top() to display them:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;">while( !s.empty() ) {</p><p class="s2" style="padding-left: 36pt;text-indent: 0pt;line-height: 93%;text-align: left;">cout &lt;&lt; s.top() &lt;&lt; &quot; &quot;; s.pop();</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: pop</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part18.htm">&lt; Previous</a><span> | </span><a href="../Cpp_STL_ReferenceManual.html">Contents</a><span> | </span><a href="part20.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
