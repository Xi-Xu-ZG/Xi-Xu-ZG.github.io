<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Vector operators</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part7.htm">&lt; Previous</a><span> | </span><a href="../Cpp_STL_ReferenceManual.html">Contents</a><span> | </span><a href="part9.htm">Next &gt;</a></p><h3 style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark81">Vector operators</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;vector&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">TYPE&amp; operator[]( <b>size_type </b>index );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">const TYPE&amp; operator[]( <b>size_type </b>index ) const; vector operator=(const vector&amp; c2);</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">bool operator==(const vector&amp; c1, const vector&amp; c2); bool operator!=(const vector&amp; c1, const vector&amp; c2); bool operator&lt;(const vector&amp; c1, const vector&amp; c2); bool operator&gt;(const vector&amp; c1, const vector&amp; c2); bool operator&lt;=(const vector&amp; c1, const vector&amp; c2); bool operator&gt;=(const vector&amp; c1, const vector&amp; c2);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">All of the C++ containers can be compared and assigned with the standard comparison operators: ==, !=, &lt;=, &gt;=, &lt;, &gt;, and =. Individual elements of a vector can be examined with the [] operator.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Performing a comparison or assigning one vector to another takes linear time. The [] operator runs in constant time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">Two vectors are equal if:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;">1. Their size is the same, and</p><p style="padding-left: 41pt;text-indent: -14pt;text-align: left;">2. Each member in location i in one vector is equal to the the member in location i in the other vector.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Comparisons among vectors are done lexicographically. For example, the following code uses the [] operator to access all of the elements of a vector:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; v( 5, 1 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">for( int i = 0; i &lt; v.size(); i++ ) {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;Element &quot; &lt;&lt; i &lt;&lt; &quot; is &quot; &lt;&lt; v[i] &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: at</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_071.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark82">assign</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 19pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;vector&gt;</p><p class="s2" style="padding-left: 19pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void assign( <b>size_type </b>num, const TYPE&amp; val );</p><p class="s2" style="padding-left: 19pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void assign( input_iterator start, input_iterator end );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">The assign() function either gives the current vector the values from <i>start </i>to <i>end</i>, or gives it <i>num </i>copies of <i>val</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">This function will destroy the previous contents of the vector.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">For example, the following code uses assign() to put 10 copies of the integer 42 into a vector:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 13pt;text-indent: 0pt;line-height: 93%;text-align: left;">vector&lt;int&gt; v; v.assign( 10, 42 );</p><p class="s2" style="padding-left: 25pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( int i = 0; i &lt; v.size(); i++ ) { cout &lt;&lt; v[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 13pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 13pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">The above code displays the following output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">42 42 42 42 42 42 42 42 42 42</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">The next example shows how assign() can be used to copy one vector to another:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 13pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; v1;</p><p class="s2" style="padding-left: 25pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( int i = 0; i &lt; 10; i++ ) { v1.push_back( i );</p><p class="s2" style="padding-left: 13pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 13pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; v2;</p><p class="s2" style="padding-left: 13pt;text-indent: 0pt;line-height: 93%;text-align: left;">v2.assign( v1.begin(), v1.end() ); for( int i = 0; i &lt; v2.size(); i++ ) {</p><p class="s2" style="padding-left: 25pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; v2[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 13pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 13pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">When run, the above code displays the following output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">0 1 2 3 4 5 6 7 8 9</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">Related topics: (C++ Strings) assign insert</p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 13pt;text-align: left;">push_back</p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 14pt;text-align: left;">(C++ Lists) push_front</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_072.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark83">at</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;vector&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">TYPE&amp; at( <b>size_type </b>loc );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const TYPE&amp; at( <b>size_type </b>loc ) const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The at() function returns a reference to the element in the vector at index <i>loc</i>. The at() function is safer than the [] operator, because it won&#39;t let you reference items outside the bounds of the vector.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, consider the following code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; v( 5, 1 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">for( int i = 0; i &lt; 10; i++ ) {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;Element &quot; &lt;&lt; i &lt;&lt; &quot; is &quot; &lt;&lt; v[i] &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">This code overrunns the end of the vector, producing potentially dangerous results. The following code would be much safer:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; v( 5, 1 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">for( int i = 0; i &lt; 10; i++ ) {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;Element &quot; &lt;&lt; i &lt;&lt; &quot; is &quot; &lt;&lt; v.at(i) &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Instead of attempting to read garbage values from memory, the at() function will realize that it is about to overrun the vector and will throw an exception.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: Vector operators</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="573" height="1" alt="image" src="Image_073.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark84">back</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;vector&gt; TYPE&amp; back();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const TYPE&amp; back() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 200%;text-align: left;">The back() function returns a reference to the last element in the vector. For example:</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; v;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( int i = 0; i &lt; 5; i++ ) { v.push_back(i);</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;The first element is &quot; &lt;&lt; v.front()</p><p class="s2" style="padding-left: 42pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&lt;&lt; &quot; and the last element is &quot; &lt;&lt; v.back() &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">This code produces the following output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">The first element is 0 and the last element is 4</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">The back() function runs in constant time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">front</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">pop_back</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_074.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark85">begin</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;vector&gt; iterator begin();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const_iterator begin() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The function begin() returns an iterator to the first element of the vector, and runs in constant time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses begin() to initialize an iterator that is used to traverse the elements of a vector:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">vector&lt;string&gt; words; string str;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">while( cin &gt;&gt; str ) words.push_back(str); vector&lt;string&gt;::iterator iter;</p><p class="s2" style="padding-left: 30pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( iter = words.begin(); iter != words.end(); iter++ ) { cout &lt;&lt; *iter &lt;&lt; endl;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When given this input:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">hey mickey you&#39;re so fine</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">...the above code produces the following output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">hey mickey you&#39;re so fine</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: [] operator</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">at end</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">rbegin rend</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_075.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark86">capacity</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;vector&gt;</p><p class="s16" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_type <span class="s2">capacity() const;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The capacity() function returns the number of elements that the vector can hold before it will need to allocate more space.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses two different methods to set the capacity of two vectors. One method passes an argument to the constructor that suggests an initial size, the other method calls the reserve function to achieve a similar goal:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; v1(10);</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 93%;text-align: left;">cout &lt;&lt; &quot;The capacity of v1 is &quot; &lt;&lt; v1.capacity() &lt;&lt; endl; vector&lt;int&gt; v2;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">v2.reserve(20);</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;The capacity of v2 is &quot; &lt;&lt; v2.capacity() &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When run, the above code produces the following output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 93%;text-align: left;">The capacity of v1 is 10 The capacity of v2 is 20</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">C++ containers are designed to grow in size dynamically. This frees the programmer from having to worry about storing an arbitrary number of elements in a container. However, sometimes the programmer can improve the performance of her program by giving hints to the compiler about the size of the containers that the program will use. These hints come in the form of the reserve() function and the constructor used in the above example, which tell the compiler how large the container is expected to get.</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">The capacity() function runs in constant time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">reserve</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">resize size</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="573" height="1" alt="image" src="Image_076.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark87">clear</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;vector&gt; void clear();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 202%;text-align: left;">The function clear() deletes all of the elements in the vector. clear() runs in linear time.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">erase</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_077.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark88">empty</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;vector&gt; bool empty() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The empty() function returns true if the vector has no elements, false otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses empty() as the stopping condition on a while loop to clear a vector and display its contents in reverse order:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; v;</p><p class="s2" style="padding-left: 30pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( int i = 0; i &lt; 5; i++ ) { v.push_back(i);</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">while( !v.empty() ) {</p><p class="s2" style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: left;">cout &lt;&lt; v.back() &lt;&lt; endl; v.pop_back();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: size</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_078.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark89">end</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;vector&gt; iterator end();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const_iterator end() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The end() function returns an iterator just past the end of the vector.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">Note that before you can access the last element of the vector using an iterator that you get from a call to end(), you&#39;ll have to decrement the iterator first. This is because end() doesn&#39;t point to the end of the vector; it points <b>just past the end of the vector</b>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, in the following code, the first &quot;cout&quot; statement will display garbage, whereas the second statement will actually display the last element of the vector:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">vector&lt;int&gt; v1; v1.push_back( 0 );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">v1.push_back( 1 );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">v1.push_back( 2 );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">v1.push_back( 3 );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">int bad_val = *(v1.end());</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">cout &lt;&lt; &quot;bad_val is &quot; &lt;&lt; bad_val &lt;&lt; endl; int good_val = *(v1.end() - 1);</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;good_val is &quot; &lt;&lt; good_val &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The next example shows how begin() and end() can be used to iterate through all of the members of a</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">); vector&lt;int&gt;::iterator it; for( it = v1.begin(); it != v1.end(); it++ ) { cout &lt;&lt; *it &lt;&lt; endl; }</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The iterator is initialized with a call to begin(). After the body of the loop has been executed, the iterator is incremented and tested to see if it is equal to the result of calling end(). Since end() returns an iterator pointing to an element just after the last element of the vector, the loop will only stop once all of the elements of the vector have been displayed.</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">end() runs in constant time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">begin</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">rbegin rend</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_079.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark90">erase</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;vector&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator erase( iterator loc );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator erase( iterator start, iterator end );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">The erase() function either deletes the element at location <i>loc</i>, or deletes the elements between <i>start </i>and <i>end </i>(including <i>start </i>but not including <i>end</i>). The return value is the element after the last element erased.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The first version of erase (the version that deletes a single element at location <i>loc</i>) runs in constant time for lists and linear time for vectors, dequeues, and strings. The multiple- element version of erase always takes linear time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: justify;">For example:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">// Create a vector, load it with the first ten characters of the alphabet</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">vector&lt;char&gt; alphaVector; for( int i=0; i &lt; 10; i++ ) {</p><p class="s2" style="padding-left: 30pt;text-indent: 0pt;line-height: 10pt;text-align: left;">alphaVector.push_back( i + 65 );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">int size = alphaVector.size(); vector&lt;char&gt;::iterator startIterator; vector&lt;char&gt;::iterator tempIterator; for( int i=0; i &lt; size; i++ ) {</p><p class="s2" style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: left;">startIterator = alphaVector.begin(); alphaVector.erase( startIterator );</p><p class="s2" style="padding-left: 30pt;text-indent: 0pt;line-height: 10pt;text-align: left;">// Display the vector</p><p class="s2" style="padding-left: 6pt;text-indent: 24pt;line-height: 93%;text-align: left;">for( tempIterator = alphaVector.begin(); tempIterator != alphaVector.end(); tempIterator++ ) {</p><p class="s2" style="padding-left: 42pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; *tempIterator;</p><p class="s2" style="padding-left: 30pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 30pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">That code would display the following output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">BCDEFGHIJ CDEFGHIJ DEFGHIJ EFGHIJ FGHIJ GHIJ</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">HIJ IJ J</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">In the next example, erase() is called with two iterators to delete a range of elements from a vector:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">// create a vector, load it with the first ten characters of the</p><p class="s2" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">alphabet</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">vector&lt;char&gt; alphaVector; for( int i=0; i &lt; 10; i++ ) {</p><p class="s2" style="padding-left: 30pt;text-indent: 0pt;line-height: 10pt;text-align: left;">alphaVector.push_back( i + 65 );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">// display the complete vector</p><p class="s2" style="padding-left: 30pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( int i = 0; i &lt; alphaVector.size(); i++ ) { cout &lt;&lt; alphaVector[i];</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">// use erase to remove all but the first two and last three elements</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">// of the vector</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">alphaVector.erase( alphaVector.begin()+2, alphaVector.end()-3 );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">// display the modified vector</p><p class="s2" style="padding-left: 30pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( int i = 0; i &lt; alphaVector.size(); i++ ) { cout &lt;&lt; alphaVector[i];</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When run, the above code displays:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">ABCDEFGHIJ ABHIJ</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: clear</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">insert pop_back</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">(C++ Lists) pop_front (C++ Lists) remove (C++ Lists) remove_if</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_080.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark91">front</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;vector&gt; TYPE&amp; front();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const TYPE&amp; front() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The front() function returns a reference to the first element of the vector, and runs in constant time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses a vector and the sort() algorithm to display the first word (in alphabetical order) entered by a user:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">vector&lt;string&gt; words; string str;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">while( cin &gt;&gt; str ) words.push_back(str); sort( words.begin(), words.end() );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;In alphabetical order, the first word is &#39;&quot; &lt;&lt; words.front()</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">&lt;&lt; &quot;&#39;.&quot; &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When provided with this input:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">now is the time for all good men to come to the aid of their country</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">...the above code displays:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">In alphabetical order, the first word is &#39;aid&#39;.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: back</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">(C++ Lists) pop_front (C++ Lists) push_front</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_081.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark92">insert</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;vector&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator insert( iterator loc, const TYPE&amp; val );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void insert( iterator loc, <b>size_type </b>num, const TYPE&amp; val );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void insert( iterator loc, input_iterator start, input_iterator end );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The insert() function either:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><span class="s1">•  </span>inserts <i>val </i>before <i>loc</i>, returning an iterator to the element inserted,</p><p style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><span class="s1">•  </span>inserts <i>num </i>copies of <i>val </i>before <i>loc</i>, or</p><p style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><span class="s1">•  </span>inserts the elements from <i>start </i>to <i>end </i>before <i>loc</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Note that inserting elements into a vector can be relatively time-intensive, since the underlying data structure for a vector is an array. In order to insert data into an array, you might need to displace a lot of the elements of that array, and this can take linear time. If you are planning on doing a lot of insertions into your vector and you care about speed, you might be better off using a container that has a linked list as its underlying data structure (such as a List or a Deque).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses the insert() function to splice four copies of the character &#39;C&#39; into a vector of characters:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 6pt;text-indent: 6pt;line-height: 94%;text-align: left;">// Create a vector, load it with the first 10 characters of the alphabet</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">vector&lt;char&gt; alphaVector; for( int i=0; i &lt; 10; i++ ) {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">alphaVector.push_back( i + 65 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">// Insert four C&#39;s into the vector</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 93%;text-align: left;">vector&lt;char&gt;::iterator theIterator = alphaVector.begin(); alphaVector.insert( theIterator, 4, &#39;C&#39; );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">// Display the vector</p><p class="s2" style="padding-left: 6pt;text-indent: 6pt;line-height: 94%;text-align: left;">for( theIterator = alphaVector.begin(); theIterator != alphaVector.end(); theIterator++ )  {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; *theIterator;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">This code would display:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">CCCCABCDEFGHIJ</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">On the next page is another example of the insert() function. In this code, insert() is used to append the contents of one vector onto the end of another:</p><p class="s2" style="padding-top: 5pt;padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">vector&lt;int&gt; v1; v1.push_back( 0 );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">v1.push_back( 1 );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">v1.push_back( 2 );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">v1.push_back( 3 ); vector&lt;int&gt; v2; v2.push_back( 5 );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">v2.push_back( 6 );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">v2.push_back( 7 );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">v2.push_back( 8 );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;Before, v2 is: &quot;;</p><p class="s2" style="padding-left: 30pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( int i = 0; i &lt; v2.size(); i++ ) { cout &lt;&lt; v2[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">v2.insert( v2.end(), v1.begin(), v1.end() ); cout &lt;&lt; &quot;After, v2 is: &quot;;</p><p class="s2" style="padding-left: 30pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( int i = 0; i &lt; v2.size(); i++ ) { cout &lt;&lt; v2[i] &lt;&lt; &quot; &quot;;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When run, this code displays:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Before, v2 is: 5 6 7 8</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">After, v2 is: 5 6 7 8 0 1 2 3</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">assign erase push_back</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">(C++ Lists) merge (C++ Lists) push_front (C++ Lists) splice</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_082.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark93">max_size</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;vector&gt;</p><p class="s16" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_type <span class="s2">max_size() const;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The max_size() function returns the maximum number of elements that the vector can hold. The max_size() function should not be confused with the size() or capacity() functions, which return the number of elements currently in the vector and the the number of elements that the vector will be able to hold before more memory will have to be allocated, respectively.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: size</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_083.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark94">pop_back</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;vector&gt; void pop_back();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 202%;text-align: left;">The pop_back() function removes the last element of the vector. pop_back() runs in constant time.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">back erase</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">(C++ Lists) pop_front push_back</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_084.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark95">push_back</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;vector&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void push_back( const TYPE&amp; val );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 202%;text-align: left;">The push_back() function appends <i>val </i>to the end of the vector. For example, the following code puts 10 integers into a vector:</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; the_vector;</p><p class="s2" style="padding-left: 36pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( int i = 0; i &lt; 10; i++ ) { the_vector.push_back( i );</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When displayed, the resulting vector would look like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">0 1 2 3 4 5 6 7 8 9</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">push_back() runs in constant time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">assign</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">insert pop_back</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">(C++ Lists) push_front</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_085.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark96">rbegin</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;vector&gt; reverse_iterator rbegin();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const_reverse_iterator rbegin() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 200%;text-align: left;">The rbegin() function returns a reverse_iterator to the end of the current vector. rbegin() runs in constant time.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">begin end rend</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_086.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark97">rend</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">#include &lt;vector&gt; reverse_iterator rend();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const_reverse_iterator rend() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 202%;text-align: left;">The function rend() returns a reverse_iterator to the beginning of the current vector. rend() runs in constant time.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">begin end rbegin</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_087.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark98">reserve</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;vector&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void reserve( <b>size_type </b>size );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 202%;text-align: left;">The reserve() function sets the capacity of the vector to at least <i>size</i>. reserve() runs in linear time.</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: capacity</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_088.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark99">resize</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;vector&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void resize( <b>size_type </b>num, const TYPE&amp; val = TYPE() );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The function resize() changes the size of the vector to <i>size</i>. If <i>val </i>is specified then any newly-created elements will be initialized to have a value of <i>val</i>.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">This function runs in linear time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Vector constructors &amp; destructors capacity</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">size</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_089.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark100">size</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;vector&gt;</p><p class="s16" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_type <span class="s2">size() const;</span></p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">The size() function returns the number of elements in the current vector. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">capacity</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">empty</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">(C++ Strings) length max_size</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">resize</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_090.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark101">swap</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;vector&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void swap( container&amp; from );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The swap() function exchanges the elements of the current vector with those of <i>from</i>. This function operates in constant time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses the swap() function to exchange the contents of two vectors:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">vector v1; v1.push_back(&quot;I&#39;m in v1!&quot;); vector v2;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">v2.push_back(&quot;And I&#39;m in v2!&quot;); v1.swap(v2);</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">cout &lt;&lt; &quot;The first element in v1 is &quot; &lt;&lt; v1.front() &lt;&lt; endl; cout &lt;&lt; &quot;The first element in v2 is &quot; &lt;&lt; v2.front() &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The above code displays:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">The first element in v1 is And I&#39;m in v2! The first element in v2 is I&#39;m in v1!</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">= operator</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">(C++ Lists) splice</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_091.png"/></span></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part7.htm">&lt; Previous</a><span> | </span><a href="../Cpp_STL_ReferenceManual.html">Contents</a><span> | </span><a href="part9.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
