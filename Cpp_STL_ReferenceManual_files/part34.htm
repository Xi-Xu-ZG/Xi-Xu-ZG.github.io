<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Multimap operators</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part33.htm">&lt; Previous</a><span> | </span><a href="../Cpp_STL_ReferenceManual.html">Contents</a><span> | </span><a href="part35.htm">Next &gt;</a></p><h3 style="padding-top: 9pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark243">Multimap operators</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">multimap operator=(const multimap&amp; c2);</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">bool operator==(const multimap&amp; c1, const multimap&amp; c2); bool operator!=(const multimap&amp; c1, const multimap&amp; c2); bool operator&lt;(const multimap&amp; c1, const multimap&amp; c2); bool operator&gt;(const multimap&amp; c1, const multimap&amp; c2); bool operator&lt;=(const multimap&amp; c1, const multimap&amp; c2); bool operator&gt;=(const multimap&amp; c1, const multimap&amp; c2);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">All of the C++ containers can be compared and assigned with the standard comparison operators: ==, !=, &lt;=, &gt;=, &lt;, &gt;, and =. Performing a comparison or assigning one multimap to another takes linear time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Two multimaps are equal if:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;">1. Their size is the same, and</p><p style="padding-left: 41pt;text-indent: -14pt;text-align: left;">2. Each member in location i in one multimap is equal to the the member in location i in the other multimap.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">Comparisons among multimaps are done lexicographically. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Multimap Constructors</p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark244">begin</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;map&gt; iterator begin();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const_iterator begin() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The function begin() returns an iterator to the first element of the multimap. begin() should run in constant time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses begin() to initialize an iterator that is used to traverse a list:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 93%;text-align: left;">// Create a list of characters list&lt;char&gt; charList;</p><p class="s2" style="padding-left: 36pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( int i=0; i &lt; 10; i++ ) { charList.push_front( i + 65 );</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 94%;text-align: left;">// Display the list list&lt;char&gt;::iterator theIterator;</p><p class="s2" style="padding-left: 6pt;text-indent: 18pt;line-height: 94%;text-align: left;">for( theIterator = charList.begin(); theIterator != charList.end(); theIterator++ ) {</p><p class="s2" style="padding-left: 36pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; *theIterator;</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">end rbegin rend</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_212.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark245">clear</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;map&gt; void clear();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The function clear() deletes all of the elements in the multimap. clear() runs in linear time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: (C++ Lists) erase</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_213.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark246">count</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s16" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_type <span class="s2">count( const key_type&amp; key );</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 202%;text-align: left;">The function count() returns the number of occurrences of <i>key </i>in the multimap. count() should run in logarithmic time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_214.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark247">empty</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">bool empty() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The empty() function returns true if the multimap has no elements, false otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses empty() as the stopping condition on a (C/C++ Keywords) while loop to clear a multimap and display its contents in reverse order:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">vector&lt;int&gt; v;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 93%;text-align: left;">for( int i = 0; i &lt; 5; i++ ) { v.push_back(i);</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">while( !v.empty() ) {</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 93%;text-align: left;">cout &lt;&lt; v.back() &lt;&lt; endl; v.pop_back();</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: size</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_215.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark248">end</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;map&gt; iterator end();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const_iterator end() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The end() function returns an iterator just past the end of the multimap.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Note that before you can access the last element of the multimap using an iterator that you get from a call to end(), you&#39;ll have to decrement the iterator first.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses begin() and end() to iterate through all of the members of a vector:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">vector&lt;int&gt; v1( 5, 789 ); vector&lt;int&gt;::iterator it;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( it = v1.begin(); it != v1.end(); it++ ) { cout &lt;&lt; *it &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The iterator is initialized with a call to begin(). After the body of the loop has been executed, the iterator is incremented and tested to see if it is equal to the result of calling end(). Since end() returns an iterator pointing to an element just after the last element of the vector, the loop will only stop once all of the elements of the vector have been displayed.</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">end() runs in constant time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">begin</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">rbegin rend</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_216.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark249">find</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator find( const key_type&amp; key );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The find() function returns an iterator to <i>key</i>, or an iterator to the end of the multimap if</p><p class="s11" style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">key <span class="p">is not found.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">find() runs in logarithmic time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_217.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark250">equal_range</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">pair&lt;iterator, iterator&gt; equal_range( const key_type&amp; key );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The function equal_range() returns two iterators - one to the first element that contains</p><p class="s11" style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">key<span class="p">, another to a point just after the last element that contains </span>key<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, here is a hypothetical input-configuration loader using multimaps, strings and equal_range():</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">multimap&lt;string,pair&lt;int,int&gt; &gt; input_config;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">// read configuration from file &quot;input.conf&quot; to input_config readConfigFile( input_config, &quot;input.conf&quot; );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">pair&lt;multimap&lt;string,pair&lt;int,int&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: -12pt;line-height: 94%;text-align: left;">&gt;::iterator,multimap&lt;string,pair&lt;int,int&gt; &gt;::iterator&gt; ii; multimap&lt;string,pair&lt;int,int&gt; &gt;::iterator i;</p><p class="s2" style="padding-top: 9pt;padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">ii = input_config.equal_range(&quot;key&quot;);    // keyboard key-bindings</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">// we can iterate over a range just like with begin() and end() for( i = ii.first; i != ii.second; ++i ) {</p><p class="s2" style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: left;">// add a key binding with this key and output bindkey(i-&gt;second.first, i-&gt;second.second);</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">ii = input_config.equal_range(&quot;joyb&quot;);    // joystick button key- bindings</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">for( i = ii.first; i != ii.second; ++i ) {</p><p class="s2" style="padding-left: 30pt;text-indent: 0pt;line-height: 94%;text-align: left;">// add a key binding with this joystick button and output bindjoyb(i-&gt;second.first, i-&gt;second.second);</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_218.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark251">erase</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void erase( iterator pos );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void erase( iterator start, iterator end );</p><p class="s16" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_type <span class="s2">erase( const key_type&amp; key );</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The erase function() either erases the element at <i>pos</i>, erases the elements between <i>start</i></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">and <i>end</i>, or erases all elements that have the value of <i>key</i>.</p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark252">insert</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">iterator insert( iterator pos, const TYPE&amp; val ); iterator insert( const TYPE&amp; val );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void insert( input_iterator start, input_iterator end );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The function insert() either:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: -14pt;text-align: left;"><span class="s1">•  </span>inserts <i>val </i>after the element at <i>pos </i>(where <i>pos </i>is really just a suggestion as to where <i>val </i>should go, since multimaps are ordered), and returns an iterator to that element.</p><p style="padding-left: 27pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><span class="s1">•  </span>inserts <i>val </i>into the multimap, returning an iterator to the element inserted.</p><p style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><span class="s1">•  </span>inserts a range of elements from <i>start </i>to <i>end</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses the insert() function to add several &lt;name,ID&gt; pairs to a employee multimap:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">multimap&lt;string,int&gt; m; int employeeID = 0;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">m.insert( pair&lt;string,int&gt;(&quot;Bob Smith&quot;,employeeID++) ); m.insert( pair&lt;string,int&gt;(&quot;Bob Thompson&quot;,employeeID++) ); m.insert( pair&lt;string,int&gt;(&quot;Bob Smithey&quot;,employeeID++) ); m.insert( pair&lt;string,int&gt;(&quot;Bob Smith&quot;,employeeID++) );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">cout &lt;&lt; &quot;Number of employees named &#39;Bob Smith&#39;: &quot; &lt;&lt; m.count(&quot;Bob Smith&quot;) &lt;&lt; endl;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">cout &lt;&lt; &quot;Number of employees named &#39;Bob Thompson&#39;: &quot; &lt;&lt; m.count(&quot;Bob Thompson&quot;) &lt;&lt; endl;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">cout &lt;&lt; &quot;Number of employees named &#39;Bob Smithey&#39;: &quot; &lt;&lt; m.count(&quot;Bob Smithey&quot;) &lt;&lt; endl;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;Employee list: &quot; &lt;&lt; endl;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">for( multimap&lt;string, int&gt;::iterator iter = m.begin(); iter != m.end(); ++iter ) {</p><p class="s2" style="padding-left: 6pt;text-indent: 24pt;line-height: 94%;text-align: left;">cout &lt;&lt; &quot; Name: &quot; &lt;&lt; iter-&gt;first &lt;&lt; &quot;, ID #&quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When run, the above code produces the following output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">Number of employees named &#39;Bob Smith&#39;: 2 Number of employees named &#39;Bob Thompson&#39;: 1 Number of employees named &#39;Bob Smithey&#39;: 1 Employee list:</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 93%;text-align: left;">Name: Bob Smith, ID #0 Name: Bob Smith, ID #3 Name: Bob Smithey, ID #2 Name: Bob Thompson, ID #1</p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark253">key_comp</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">key_compare key_comp() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 202%;text-align: left;">The function key_comp() returns the function that compares keys. key_comp() runs in constant time.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">value_comp</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_219.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark254">lower_bound</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator lower_bound( const key_type&amp; key );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The lower_bound() function returns an iterator to the first element which has a value greater than or equal to key.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">lower_bound() runs in logarithmic time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">upper_bound</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_220.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark255">max_size</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s16" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_type <span class="s2">max_size() const;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The max_size() function returns the maximum number of elements that the multimap can hold. The max_size() function should not be confused with the size() or (C++ Strings) capacity() functions, which return the number of elements currently in the multimap and the the number of elements that the multimap will be able to hold before more memory will have to be allocated, respectively.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: size</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_221.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark256">rbegin</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;map&gt; reverse_iterator rbegin();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const_reverse_iterator rbegin() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 200%;text-align: left;">The rbegin() function returns a reverse_iterator to the end of the current multimap. rbegin() runs in constant time.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">begin end rend</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_222.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark257">rend</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">#include &lt;map&gt; reverse_iterator rend();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const_reverse_iterator rend() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 202%;text-align: left;">The function rend() returns a reverse_iterator to the beginning of the current multimap. rend() runs in constant time.</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: begin</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">end rbegin</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_223.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark258">size</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s16" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_type <span class="s2">size() const;</span></p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">The size() function returns the number of elements in the current multimap. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">(C++ Strings) capacity</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">empty</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">(C++ Strings) length max_size</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">(C++ Strings) resize</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_224.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark259">swap</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void swap( container&amp; from );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The swap() function exchanges the elements of the current multimap with those of <i>from</i>. This function operates in constant time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses the swap() function to exchange the values of two strings:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 93%;text-align: left;">string first( &quot;This comes first&quot; ); string second( &quot;And this is second&quot; ); first.swap( second );</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 94%;text-align: left;">cout &lt;&lt; first &lt;&lt; endl; cout &lt;&lt; second &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The above code displays:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 94%;text-align: left;">And this is second This comes first</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: (C++ Lists) splice</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_225.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark260">upper_bound</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator upper_bound( const key_type&amp; key );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The function upper_bound() returns an iterator to the first element in the multimap with a key greater than <i>key</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">lower_bound</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_226.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark261">value_comp</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">value_compare value_comp() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 200%;text-align: left;">The value_comp() function returns the function that compares values. value_comp() runs in constant time.</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: key_comp</p><h4 style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: center;"><a name="bookmark262">C++ Bitsets</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">C++ Bitsets give the programmer a set of bits as a data structure. Bitsets can be manipulated by various binary operators such as logical AND, OR, and so on.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:65.925pt" cellspacing="0"><tr style="height:17pt"><td style="width:312pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt" colspan="2"><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">Bitset Constructors create new bitsets</p></td></tr><tr style="height:17pt"><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">Bitset Operators</p></td><td style="width:223pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">compare and assign bitsets</p></td></tr><tr style="height:17pt"><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">any</p></td><td style="width:223pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">true if any bits are set</p></td></tr><tr style="height:17pt"><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">count</p></td><td style="width:223pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">returns the number of set bits</p></td></tr><tr style="height:17pt"><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">flip</p></td><td style="width:223pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">reverses the bitset</p></td></tr><tr style="height:17pt"><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">none</p></td><td style="width:223pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">true if no bits are set</p></td></tr><tr style="height:17pt"><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">reset</p></td><td style="width:223pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">sets bits to zero</p></td></tr><tr style="height:17pt"><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">set</p></td><td style="width:223pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">sets bits</p></td></tr><tr style="height:17pt"><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">size</p></td><td style="width:223pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">number of bits that the bitset can hold</p></td></tr><tr style="height:17pt"><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">test</p></td><td style="width:223pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">returns the value of a given bit</p></td></tr><tr style="height:17pt"><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">to_string</p></td><td style="width:223pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">string representation of the bitset</p></td></tr><tr style="height:31pt"><td style="width:89pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-top: 7pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">to_ulong</p></td><td style="width:223pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 9pt;padding-right: 6pt;text-indent: 0pt;text-align: left;">returns an integer representation of the bitset</p></td></tr></table><h4 style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark263">Bitset Operators</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;bitset&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">!=, ==, &amp;=, ^=, |=, ~, &lt;&lt;=, &gt;&gt;=, []</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">These operators all work with bitsets. They can be described as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">!= returns true if the two bitsets are not equal.</span></p><p class="s1" style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">== returns true if the two bitsets are equal.</span></p><p class="s1" style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">&amp;= performs the AND operation on the two bitsets.</span></p><p class="s1" style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">^= performs the XOR operation on the two bitsets.</span></p><p class="s1" style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">|= performs the OR operation on the two bitsets.</span></p><p class="s1" style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">~ reverses the bitset (same as calling flip())</span></p><p class="s1" style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">&lt;&lt;= shifts the bitset to the left</span></p><p class="s1" style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">&gt;&gt;= shifts the bitset to the right</span></p><p class="s1" style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;">•  <span class="p">[x] returns a reference to the xth bit in the bitset.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code creates a bitset and shifts it to the left 4 places:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">// create a bitset out of a number bitset&lt;8&gt; bs2( (long) 131 );</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;bs2 is &quot; &lt;&lt; bs2 &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 93%;text-align: left;">// shift the bitset to the left by 4 digits bs2 &lt;&lt;= 4;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;now bs2 is &quot; &lt;&lt; bs2 &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When the above code is run, it displays:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">bs2 is 10000011 now bs2 is 00110000</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_227.png"/></span></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part33.htm">&lt; Previous</a><span> | </span><a href="../Cpp_STL_ReferenceManual.html">Contents</a><span> | </span><a href="part35.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
