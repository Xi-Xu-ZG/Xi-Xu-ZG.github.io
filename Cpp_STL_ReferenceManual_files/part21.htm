<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Queue constructor</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part20.htm">&lt; Previous</a><span> | </span><a href="../Cpp_STL_ReferenceManual.html">Contents</a><span> | </span><a href="part22.htm">Next &gt;</a></p><h3 style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark165">Queue constructor</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;queue&gt; queue();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">queue( const Container&amp; con );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Queues have a default constructor as well as a copy constructor that will create a new queue out of the container <i>con</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code creates a queue of strings, populates it with input from the user, and then displays it back to the user:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">queue&lt;string&gt; waiting_line; while( waiting_line.size() &lt; 5 ) {</p><p class="s2" style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: left;">cout &lt;&lt; &quot;Welcome to the line, please enter your name: &quot;; string s;</p><p class="s2" style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: left;">getline( cin, s ); waiting_line.push(s);</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">while( !waiting_line.empty() ) {</p><p class="s2" style="padding-left: 30pt;text-indent: 0pt;line-height: 93%;text-align: left;">cout &lt;&lt; &quot;Now serving: &quot; &lt;&lt; waiting_line.front() &lt;&lt; endl; waiting_line.pop();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When run, the above code might produce this output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">Welcome to the line, please enter your name: Nate Welcome to the line, please enter your name: lizzy</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">Welcome to the line, please enter your name: Robert B. Parker Welcome to the line, please enter your name: ralph</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">Welcome to the line, please enter your name: Matthew Now serving: Nate</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Now serving: lizzy</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">Now serving: Robert B. Parker Now serving: ralph</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Now serving: Matthew</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_144.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark166">back</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;queue&gt; TYPE&amp; back();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const TYPE&amp; back() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;line-height: 211%;text-align: left;">The back() function returns a reference to the last element in the queue. For example:</p><p class="s10" style="padding-left: 11pt;text-indent: 0pt;line-height: 10pt;text-align: left;">queue&lt;int&gt; q;</p><p class="s10" style="padding-left: 22pt;text-indent: -10pt;line-height: 94%;text-align: left;">for( int i = 0; i &lt; 5; i++ ) { q.push(i);</p><p class="s10" style="padding-left: 11pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s10" style="padding-left: 11pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;The first element is &quot; &lt;&lt; q.front()</p><p class="s10" style="padding-left: 38pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;&lt; &quot; and the last element is &quot; &lt;&lt; q.back() &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">This code produces the following output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">The first element is 0 and the last element is 4</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The back() function runs in constant time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">front</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">(C++ Lists) pop_back</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_145.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark167">empty</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 94%;text-align: left;">#include &lt;queue&gt; bool empty() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The empty() function returns true if the queue has no elements, false otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses empty() as the stopping condition on a while loop to clear a queue while displaying its contents:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 11pt;text-indent: 0pt;line-height: 10pt;text-align: left;">queue&lt;int&gt; q;</p><p class="s10" style="padding-left: 22pt;text-indent: -10pt;line-height: 94%;text-align: left;">for( int i = 0; i &lt; 5; i++ ) { q.push(i);</p><p class="s10" style="padding-left: 11pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s10" style="padding-left: 11pt;text-indent: 0pt;line-height: 10pt;text-align: left;">while( !q.empty() ) {</p><p class="s10" style="padding-left: 22pt;text-indent: 0pt;line-height: 94%;text-align: left;">cout &lt;&lt; q.front() &lt;&lt; endl; q.pop();</p><p class="s10" style="padding-left: 11pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: size</p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark168">front</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;queue&gt; TYPE&amp; front();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const TYPE&amp; front() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The front() function returns a reference to the first element of the queue, and runs in constant time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">back</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">(C++ Lists) pop_front (C++ Lists) push_front</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_146.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark169">pop</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;queue&gt; void pop();</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">The function pop() removes the first element of the queue and discards it. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">push</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">(C++ Priority Queues) top</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_147.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark170">push</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;queue&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void push( const TYPE&amp; val );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The function push() adds <i>val </i>to the end of the current queue.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses the push() function to add ten integers to the end of a queue:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;">queue&lt;int&gt; q;</p><p class="s2" style="padding-left: 36pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( int i=0; i &lt; 10; i++ ) { q.push(i);</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: pop</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_148.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark171">size</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;queue&gt;</p><p class="s16" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_type <span class="s2">size() const;</span></p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">The size() function returns the number of elements in the current queue. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">empty</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">(C++ Strings) capacity (C++ Strings) length</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">(C++ Multimaps) max_size (C++ Strings) resize</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part20.htm">&lt; Previous</a><span> | </span><a href="../Cpp_STL_ReferenceManual.html">Contents</a><span> | </span><a href="part22.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
