<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Map operators</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part31.htm">&lt; Previous</a><span> | </span><a href="../Cpp_STL_ReferenceManual.html">Contents</a><span> | </span><a href="part33.htm">Next &gt;</a></p><h3 style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark222">Map operators</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 10pt;text-align: left;">#include &lt;map&gt;</p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 94%;text-align: left;">TYPE&amp; operator[]( const key_type&amp; key ); map operator=(const map&amp; c2);</p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 94%;text-align: left;">bool operator==(const map&amp; c1, const map&amp; c2); bool operator!=(const map&amp; c1, const map&amp; c2); bool operator&lt;(const map&amp; c1, const map&amp; c2); bool operator&gt;(const map&amp; c1, const map&amp; c2); bool operator&lt;=(const map&amp; c1, const map&amp; c2); bool operator&gt;=(const map&amp; c1, const map&amp; c2);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Maps can be compared and assigned with the standard comparison operators: ==, !=, &lt;=, &gt;=, &lt;,</p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;line-height: 210%;text-align: left;">&gt;, and =. Individual elements of a map can be examined with the [] operator. Performing a comparison or assigning one map to another takes linear time. <span class="s19">Two maps are equal if:</span></p><p class="s12" style="padding-top: 1pt;padding-left: 27pt;text-indent: 0pt;line-height: 11pt;text-align: left;">1. Their size is the same, and</p><p class="s13" style="padding-left: 27pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><span class="p">2. </span><span class="s14">Each member in location </span>i <span class="s12">in one map is equal to the the member in location </span>i <span class="s12">in the other map.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Comparisons among maps are done lexicographically. For example, the following code defines a map between strings and integers and loads values into the map using the [] operator:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 10pt;text-align: left;">struct strCmp {</p><p class="s10" style="padding-left: 38pt;text-indent: -10pt;line-height: 94%;text-align: left;">bool operator()( const char* s1, const char* s2 ) const { return strcmp( s1, s2 ) &lt; 0;</p><p class="s10" style="padding-left: 27pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 10pt;text-align: left;">};</p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 94%;text-align: left;">map&lt;const char*, int, strCmp&gt; ages; ages[&quot;Homer&quot;] = 38;</p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 10pt;text-align: left;">ages[&quot;Marge&quot;] = 37;</p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 10pt;text-align: left;">ages[&quot;Lisa&quot;] = 8;</p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 10pt;text-align: left;">ages[&quot;Maggie&quot;] = 1;</p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 10pt;text-align: left;">ages[&quot;Bart&quot;] = 11;</p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 94%;text-align: left;">cout &lt;&lt; &quot;Bart is &quot; &lt;&lt; ages[&quot;Bart&quot;] &lt;&lt; &quot; years old&quot; &lt;&lt; endl; cout &lt;&lt; &quot;In alphabetical order: &quot; &lt;&lt; endl;</p><p class="s10" style="padding-left: 6pt;text-indent: 10pt;line-height: 94%;text-align: left;">for( map&lt;const char*, int, strCmp&gt;::iterator iter = ages.begin(); iter != ages.end(); iter++ ) {</p><p class="s10" style="padding-left: 27pt;text-indent: 0pt;line-height: 9pt;text-align: left;">cout &lt;&lt; (*iter).first &lt;&lt; &quot; is &quot; &lt;&lt; (*iter).second &lt;&lt; &quot; years old&quot; &lt;&lt; endl;</p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When run, the above code displays this output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 94%;text-align: left;">Bart is 11 years old In alphabetical order: Bart is 11 years old Homer is 38 years old Lisa is 8 years old Maggie is 1 years old Marge is 37 years old</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Related topics:</p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;">insert</p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Map Constructors &amp; Destructors</p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark223">begin</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;map&gt; iterator begin();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const_iterator begin() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The function begin() returns an iterator to the first element of the map. begin() should run in constant time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses begin() to initialize an iterator that is used to traverse a list:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">map&lt;string,int&gt; stringCounts; string str;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">while( cin &gt;&gt; str ) stringCounts[str]++; map&lt;string,int&gt;::iterator iter;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">for( iter = stringCounts.begin(); iter != stringCounts.end(); iter+</p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">+ ) {</p><p class="s2" style="padding-left: 6pt;text-indent: 24pt;line-height: 93%;text-align: left;">cout &lt;&lt; &quot;word: &quot; &lt;&lt; iter-&gt;first &lt;&lt; &quot;, count: &quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When given this input:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">here are some words and here are some more words</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">...the above code generates this output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">word: and, count: 1 word: are, count: 2 word: here, count: 2 word: more, count: 1 word: some, count: 2 word: words, count: 2</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">end rbegin rend</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_194.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark224">clear</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;map&gt; void clear();</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">The function clear() deletes all of the elements in the map. clear() runs in linear time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">erase</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_195.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark225">count</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s16" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_type <span class="s2">count( const key_type&amp; key );</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 200%;text-align: left;">The function count() returns the number of occurrences of <i>key </i>in the map. count() should run in logarithmic time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_196.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark226">empty</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">bool empty() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The empty() function returns true if the map has no elements, false otherwise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses empty() as the stopping condition on a while loop to clear a map and display its contents in order:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">struct strCmp {</p><p class="s2" style="padding-left: 42pt;text-indent: -12pt;line-height: 93%;text-align: left;">bool operator()( const char* s1, const char* s2 ) const { return strcmp( s1, s2 ) &lt; 0;</p><p class="s2" style="padding-left: 30pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">};</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">...</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">map&lt;const char*, int, strCmp&gt; ages; ages[&quot;Homer&quot;] = 38;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">ages[&quot;Marge&quot;] = 37;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">ages[&quot;Lisa&quot;] = 8;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">ages[&quot;Maggie&quot;] = 1;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">ages[&quot;Bart&quot;] = 11;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">while( !ages.empty() ) {</p><p class="s2" style="padding-left: 6pt;text-indent: 24pt;line-height: 93%;text-align: left;">cout &lt;&lt; &quot;Erasing: &quot; &lt;&lt; (*ages.begin()).first &lt;&lt; &quot;, &quot; &lt;&lt; (*ages.begin()).second &lt;&lt; endl;</p><p class="s2" style="padding-left: 30pt;text-indent: 0pt;line-height: 10pt;text-align: left;">ages.erase( ages.begin() );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When run, the above code displays:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Erasing: Bart, 11</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Erasing: Homer, 38</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Erasing: Lisa, 8</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Erasing: Maggie, 1</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Erasing: Marge, 37</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: begin</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">erase size</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_197.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark227">end</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;map&gt; iterator end();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const_iterator end() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The end() function returns an iterator just past the end of the map.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Note that before you can access the last element of the map using an iterator that you get from a call to end(), you&#39;ll have to decrement the iterator first.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses begin() and end() to iterate through all of the members of a vector:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 94%;text-align: left;">vector&lt;int&gt; v1( 5, 789 ); vector&lt;int&gt;::iterator it;</p><p class="s2" style="padding-left: 24pt;text-indent: -12pt;line-height: 94%;text-align: left;">for( it = v1.begin(); it != v1.end(); it++ ) { cout &lt;&lt; *it &lt;&lt; endl;</p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The iterator is initialized with a call to begin(). After the body of the loop has been executed, the iterator is incremented and tested to see if it is equal to the result of calling end(). Since end() returns an iterator pointing to an element just after the last element of the vector, the loop will only stop once all of the elements of the vector have been displayed.</p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">end() runs in constant time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">begin</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">rbegin rend</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_198.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark228">equal_range</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">pair&lt;iterator, iterator&gt; equal_range( const key_type&amp; key );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The function equal_range() returns two iterators - one to the first element that contains</p><p class="s11" style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">key<span class="p">, another to a point just after the last element that contains </span>key<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="573" height="1" alt="image" src="Image_199.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark229">erase</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void erase( iterator pos );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void erase( iterator start, iterator end );</p><p class="s16" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_type <span class="s2">erase( const key_type&amp; key );</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">The erase function() either erases the element at <i>pos</i>, erases the elements between <i>start</i></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">and <i>end</i>, or erases all elements that have the value of <i>key</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses erase() in a while loop to incrementally clear a map and display its contents in order:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">struct strCmp {</p><p class="s2" style="padding-left: 42pt;text-indent: -12pt;line-height: 93%;text-align: left;">bool operator()( const char* s1, const char* s2 ) const { return strcmp( s1, s2 ) &lt; 0;</p><p class="s2" style="padding-left: 30pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">};</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">...</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">map&lt;const char*, int, strCmp&gt; ages; ages[&quot;Homer&quot;] = 38;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">ages[&quot;Marge&quot;] = 37;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">ages[&quot;Lisa&quot;] = 8;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">ages[&quot;Maggie&quot;] = 1;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">ages[&quot;Bart&quot;] = 11;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">while( !ages.empty() ) {</p><p class="s2" style="padding-left: 6pt;text-indent: 24pt;line-height: 93%;text-align: left;">cout &lt;&lt; &quot;Erasing: &quot; &lt;&lt; (*ages.begin()).first &lt;&lt; &quot;, &quot; &lt;&lt; (*ages.begin()).second &lt;&lt; endl;</p><p class="s2" style="padding-left: 30pt;text-indent: 0pt;line-height: 10pt;text-align: left;">ages.erase( ages.begin() );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When run, the above code displays:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Erasing: Bart, 11</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Erasing: Homer, 38</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Erasing: Lisa, 8</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Erasing: Maggie, 1</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Erasing: Marge, 37</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: begin</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">clear empty size</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_200.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark230">find</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator find( const key_type&amp; key );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The find() function returns an iterator to <i>key</i>, or an iterator to the end of the map if <i>key </i>is not found.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">find() runs in logarithmic time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses the find() function to determine how many times a user entered a certain word:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">map&lt;string,int&gt; stringCounts; string str;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">while( cin &gt;&gt; str ) stringCounts[str]++; map&lt;string,int&gt;::iterator iter = stringCounts.find(&quot;spoon&quot;); if( iter != stringCounts.end() ) {</p><p class="s2" style="padding-left: 6pt;text-indent: 24pt;line-height: 94%;text-align: left;">cout &lt;&lt; &quot;You typed &#39;&quot; &lt;&lt; iter-&gt;first &lt;&lt; &quot;&#39; &quot; &lt;&lt; iter-&gt;second &lt;&lt; &quot; time(s)&quot; &lt;&lt; endl;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When run with this input:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;line-height: 93%;text-align: left;">my spoon is too big. my spoon is TOO big! my SPOON is TOO big! I am a BANANA!</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">...the above code produces this output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">You typed &#39;spoon&#39; 2 time(s)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_201.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark231">insert</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator insert( iterator i, const TYPE&amp; pair );</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">void insert( input_iterator start, input_iterator end ); pair&lt;iterator,bool&gt; insert( const TYPE&amp; pair );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The function insert() either:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: -14pt;text-align: left;"><span class="s1">•  </span>inserts <i>pair </i>after the element at <i>pos </i>(where <i>pos </i>is really just a suggestion as to where <i>pair </i>should go, since sets and maps are ordered), and returns an iterator to that element.</p><p style="padding-left: 27pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><span class="s1">•  </span>inserts a range of elements from <i>start </i>to <i>end</i>.</p><p style="padding-left: 41pt;text-indent: -14pt;text-align: left;"><span class="s1">•  </span>inserts <i>pair</i>&lt;<i>key</i>,<i>val</i>&gt;, but only if no element with key <i>key </i>already exists. The return value is an iterator to the element inserted (or an existing pair with key <i>key</i>), and a boolean which is true if an insertion took place.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses the insert() function (along with the make_pair() function) to insert some data into a map and then displays that data:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">map&lt;string,int&gt; theMap;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">theMap.insert( make_pair( &quot;Key 1&quot;, -1 ) ); theMap.insert( make_pair( &quot;Another key!&quot;, 32 ) ); theMap.insert( make_pair( &quot;Key the Three&quot;, 66667 ) ); map&lt;string,int&gt;::iterator iter;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">for( iter = theMap.begin(); iter != theMap.end(); ++iter ) {</p><p class="s2" style="padding-left: 6pt;text-indent: 24pt;line-height: 93%;text-align: left;">cout &lt;&lt; &quot;Key: &#39;&quot; &lt;&lt; iter-&gt;first &lt;&lt; &quot;&#39;, Value: &quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When run, the above code displays this output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">Key: &#39;Another key!&#39;, Value: 32 Key: &#39;Key 1&#39;, Value: -1</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Key: &#39;Key the Three&#39;, Value: 66667</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Note that because maps are sorted containers, the output is sorted by the key value. In this case, since the map key data type is string, the map is sorted alphabetically by key.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: Map operators</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_202.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark232">key_comp</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">key_compare key_comp() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 202%;text-align: left;">The function key_comp() returns the function that compares keys. key_comp() runs in constant time.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">value_comp</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_203.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark233">lower_bound</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">iterator lower_bound( const key_type&amp; key );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The lower_bound() function returns an iterator to the first element which has a value greater than or equal to key.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">lower_bound() runs in logarithmic time. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">upper_bound</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_204.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark234">max_size</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s16" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_type <span class="s2">max_size() const;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The max_size() function returns the maximum number of elements that the map can hold. The max_size() function should not be confused with the size() or (C++ Strings) capacity() functions, which return the number of elements currently in the map and the the number of elements that the map will be able to hold before more memory will have to be allocated, respectively.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: size</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_205.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark235">rbegin</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;map&gt; reverse_iterator rbegin();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const_reverse_iterator rbegin() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 200%;text-align: left;">The rbegin() function returns a reverse_iterator to the end of the current map. rbegin() runs in constant time.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">begin end rend</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_206.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark236">rend</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 94%;text-align: left;">#include &lt;map&gt; reverse_iterator rend();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">const_reverse_iterator rend() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 202%;text-align: left;">The function rend() returns a reverse_iterator to the beginning of the current map. rend() runs in constant time.</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">begin end rbegin</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_207.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark237">size</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">#include &lt;map&gt;</p><p class="s16" style="padding-left: 18pt;text-indent: 0pt;line-height: 11pt;text-align: left;">size_type <span class="s2">size() const;</span></p><p style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;line-height: 28pt;text-align: left;">The size() function returns the number of elements in the current map. Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 11pt;text-align: left;">empty</p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">max_size</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="564" height="1" alt="image" src="Image_208.png"/></span></p><p class="s9" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark238">swap</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 10pt;text-align: left;">#include &lt;map&gt;</p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 10pt;text-align: left;">void swap( container&amp; from );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The swap() function exchanges the elements of the current map with those of <i>from</i>. This function operates in constant time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses the swap() function to exchange the values of two strings:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 22pt;text-indent: 0pt;line-height: 94%;text-align: left;">string first( &quot;This comes first&quot; ); string second( &quot;And this is second&quot; ); first.swap( second );</p><p class="s10" style="padding-left: 22pt;text-indent: 0pt;line-height: 94%;text-align: left;">cout &lt;&lt; first &lt;&lt; endl; cout &lt;&lt; second &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 22pt;text-indent: -16pt;text-align: left;">The above code displays:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 22pt;text-indent: 0pt;line-height: 94%;text-align: left;">And this is second This comes first</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Related topics:</p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;">(C++ Lists) splice</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="573" height="1" alt="image" src="Image_209.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark239">upper_bound</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 17pt;text-indent: 0pt;line-height: 10pt;text-align: left;">#include &lt;map&gt;</p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 10pt;text-align: left;">iterator upper_bound( const key_type&amp; key );</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The function upper_bound() returns an iterator to the first element in the map with a key greater than <i>key</i>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;">Related topics:</p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;line-height: 13pt;text-align: left;">lower_bound</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_210.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s9" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark240">value_comp</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 10pt;text-align: left;">#include &lt;map&gt;</p><p class="s10" style="padding-left: 16pt;text-indent: 0pt;line-height: 10pt;text-align: left;">value_compare value_comp() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The value_comp() function returns the function that compares values.value_comp() runs in constant time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Related topics: key_comp</p><h4 style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: center;"><a name="bookmark241">C++ Multimaps</a></h4><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">C++ Multimaps are like maps, in that they are sorted associative containers, but differ from maps in that they allow duplicate keys.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.125pt" cellspacing="0"><tr style="height:30pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">Multimap constructors &amp; destructors</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-left: 12pt;padding-right: 3pt;text-indent: 0pt;text-align: left;">default methods to allocate, copy, and deallocate multimaps</p></td></tr><tr style="height:17pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">Multimap operators</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">assign and compare multimaps</p></td></tr><tr style="height:17pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">begin</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">returns an iterator to the beginning of the multimap</p></td></tr><tr style="height:17pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">clear</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">removes all elements from the multimap</p></td></tr><tr style="height:17pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">count</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">returns the number of elements matching a certain key</p></td></tr><tr style="height:17pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">empty</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">true if the multimap has no elements</p></td></tr><tr style="height:17pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">end</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">returns an iterator just past the last element of a multimap</p></td></tr><tr style="height:31pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-top: 7pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">equal_range</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 12pt;padding-right: 3pt;text-indent: 0pt;text-align: left;">returns iterators to the first and just past the last elements matching a specific key</p></td></tr><tr style="height:17pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">erase</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">removes elements from a multimap</p></td></tr><tr style="height:17pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">find</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">returns an iterator to specific elements</p></td></tr><tr style="height:17pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">insert</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">inserts items into a multimap</p></td></tr><tr style="height:17pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">key_comp</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">returns the function that compares keys</p></td></tr><tr style="height:31pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-top: 7pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">lower_bound</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-left: 12pt;padding-right: 3pt;text-indent: 0pt;text-align: left;">returns an iterator to the first element greater than or equal to a certain value</p></td></tr><tr style="height:31pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-top: 7pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">max_size</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 12pt;padding-right: 3pt;text-indent: 0pt;text-align: left;">returns the maximum number of elements that the multimap can hold</p></td></tr><tr style="height:17pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">rbegin</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">returns a reverse_iterator to the end of the multimap</p></td></tr><tr style="height:17pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">rend</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">returns a reverse_iterator to the beginning of the multimap</p></td></tr><tr style="height:17pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">size</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">returns the number of items in the multimap</p></td></tr><tr style="height:17pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">swap</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">swap the contents of this multimap with another</p></td></tr><tr style="height:31pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-top: 7pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">upper_bound</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">returns an iterator to the first element greater than a certain value</p></td></tr><tr style="height:17pt"><td style="width:136pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;text-align: left;">value_comp</p></td><td style="width:296pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s4" style="padding-top: 1pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">returns the function that compares values</p></td></tr></table><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part31.htm">&lt; Previous</a><span> | </span><a href="../Cpp_STL_ReferenceManual.html">Contents</a><span> | </span><a href="part33.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
