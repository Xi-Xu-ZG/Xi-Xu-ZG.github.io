<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Multimap constructors &amp; destructors</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part32.htm">&lt; Previous</a><span> | </span><a href="../Cpp_STL_ReferenceManual.html">Contents</a><span> | </span><a href="part34.htm">Next &gt;</a></p><h3 style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark242">Multimap constructors &amp; destructors</a></h3><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Syntax:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">#include &lt;map&gt; multimap();</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">multimap( const multimap&amp; c ); multimap( iterator begin, iterator end,</p><p class="s2" style="padding-left: 78pt;text-indent: 0pt;line-height: 10pt;text-align: left;">const key_compare&amp; cmp = Compare(), const allocator&amp; alloc</p><p class="s2" style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: center;">= Allocator() );</p><p class="s2" style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: center;">~multimap();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Multimaps have several constructors:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s1" style="padding-left: 41pt;text-indent: -14pt;text-align: left;">•  <span class="p">The default constructor takes no arguments, creates a new instance of that multimap, and runs in constant time.</span></p><p style="padding-left: 41pt;text-indent: -14pt;text-align: left;"><span class="s1">•  </span>The default copy constructor runs in linear time and can be used to create a new multimap that is a copy of the given multimap <i>c</i>.</p><p style="padding-left: 41pt;text-indent: -14pt;text-align: left;"><span class="s1">•  </span>Multimaps can also be created from a range of elements defined by <i>begin </i>and <i>end</i>. When using this constructor, an optional comparison function <i>cmp </i>and allocator <i>alloc </i>can also be provided.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The default destructor is called when the multimap should be destroyed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">The template definition of multimaps requires that both a key type and value type be supplied. For example, you can instantiate a multimap that maps strings to integers with this statement:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">multimap&lt;string,int&gt; m;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">You can also supply a comparison function and an allocator in the template:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">multimap&lt;string,int,myComp,myAlloc&gt; m;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">For example, the following code uses a multimap to associate a series of employee names with numerical IDs:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">multimap&lt;string,int&gt; m; int employeeID = 0;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">m.insert( pair&lt;string,int&gt;(&quot;Bob Smith&quot;,employeeID++) ); m.insert( pair&lt;string,int&gt;(&quot;Bob Thompson&quot;,employeeID++) ); m.insert( pair&lt;string,int&gt;(&quot;Bob Smithey&quot;,employeeID++) ); m.insert( pair&lt;string,int&gt;(&quot;Bob Smith&quot;,employeeID++) );</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">cout &lt;&lt; &quot;Number of employees named &#39;Bob Smith&#39;: &quot; &lt;&lt; m.count(&quot;Bob Smith&quot;) &lt;&lt; endl;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">cout &lt;&lt; &quot;Number of employees named &#39;Bob Thompson&#39;: &quot; &lt;&lt; m.count(&quot;Bob Thompson&quot;) &lt;&lt; endl;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 93%;text-align: left;">cout &lt;&lt; &quot;Number of employees named &#39;Bob Smithey&#39;: &quot; &lt;&lt; m.count(&quot;Bob Smithey&quot;) &lt;&lt; endl;</p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; &quot;Employee list: &quot; &lt;&lt; endl;</p><p class="s2" style="padding-left: 6pt;text-indent: 12pt;line-height: 94%;text-align: left;">for( multimap&lt;string, int&gt;::iterator iter = m.begin(); iter != m.end(); ++iter ) {</p><p class="s2" style="padding-left: 30pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot; Name: &quot; &lt;&lt; iter-&gt;first &lt;&lt; &quot;, ID #&quot; &lt;&lt; iter-&gt;second &lt;&lt;</p><p class="s2" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: center;">endl;</p><p class="s2" style="text-indent: 0pt;line-height: 11pt;text-align: center;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">When run, the above code produces the following output. Note that the employee list is displayed in alphabetical order, because multimaps are sorted associative containers:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 18pt;text-indent: 0pt;line-height: 93%;text-align: left;">Number of employees named &#39;Bob Smith&#39;: 2 Number of employees named &#39;Bob Thompson&#39;: 1 Number of employees named &#39;Bob Smithey&#39;: 1 Employee list:</p><p class="s2" style="padding-left: 24pt;text-indent: 0pt;line-height: 93%;text-align: left;">Name: Bob Smith, ID #0 Name: Bob Smith, ID #3 Name: Bob Smithey, ID #2 Name: Bob Thompson, ID #1</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Related topics:</p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">count insert</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="576" height="1" alt="image" src="Image_211.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part32.htm">&lt; Previous</a><span> | </span><a href="../Cpp_STL_ReferenceManual.html">Contents</a><span> | </span><a href="part34.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
